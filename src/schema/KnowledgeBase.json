{
    "type": "callHierarchy",
    "tree": [
        {
            "name": "InitializeApiRcMgrPhx(SIL_CONTEXT *)",
            "kind": 11,
            "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrPhx.c",
            "documentation": "/**\n * InitializeApiRcMgrPhx\n *\n * @brief   Initialize internal and external APIs for Resource Manager\n *\n * @param   SilContext          A context structure through which host firmware defined data\n *                              can be passed to openSIL. The host firmware is responsible\n *                              for initializing the SIL_CONTEXT structure.\n * @retval  SilPass             API initialized successfully\n * @retval  SilInvalidParameter Id class is invalid\n *\n */",
            "definition": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )",
            "implementation": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )\r\n{\r\n  SIL_STATUS  Status;\r\n\r\n  // Initialize Common to Rev specific transfer table first\r\n  Status = SilInitCommon2RevXferTable(SilContext, SilId_RcManager, (void *)&mRcMgrXferPhx);\r\n  if (Status != SilPass) {\r\n    return Status;\r\n  }\r\n\r\n  return SilInitIp2IpApi(SilContext, SilId_RcManager, (void *)&mRcMgrApiPhx);\r\n}",
            "range": [
                {
                    "line": 191,
                    "character": 0
                },
                {
                    "line": 205,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 192,
                    "character": 0
                },
                {
                    "line": 192,
                    "character": 21
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrXferPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrCmn2Phx.c",
                        "documentation": "/**\n * @file  RcMgrCmn2Phx.c\n * @brief OpenSIL Resource Manager PHX transfer block functions\n *\n */",
                        "definition": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "implementation": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "range": [
                            {
                                "line": 12,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 12,
                                "character": 30
                            },
                            {
                                "line": 12,
                                "character": 43
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrApiPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrIp2IpPhx.c",
                        "documentation": "/**\n * @file RcMgrIp2IpPhx.c\n * @brief PHX RCMGR core specific transfer table functions\n *\n */",
                        "definition": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "implementation": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "range": [
                            {
                                "line": 10,
                                "character": 0
                            },
                            {
                                "line": 12,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 10,
                                "character": 16
                            },
                            {
                                "line": 10,
                                "character": 28
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SilInitCommon2RevXferTable(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitCommon2RevXferTable\n *\n * @brief   Register an IP Common to revision specific transfer table.\n *\n * @details The common to revision specific transfer table is an interface from common code to abstracted program\n *          specific code.\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   IpId        The ID of the IP providing the table.\n * @param   XferTable   Input of the transfar table to initialize.\n *\n * @retval  SilPass             The Xfer table was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The transfer table (Common2RevXferTable) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing transfer table for IP ID = %d\\n\", IpId);\r\n  SilVars->Common2RevXferTable[IpId] = (uintptr_t)XferTable;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 239,
                                "character": 0
                            },
                            {
                                "line": 265,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 240,
                                "character": 0
                            },
                            {
                                "line": 240,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(ex)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/Kernel.framework/Versions/A/Headers/kern/assert.h",
                                    "documentation": "",
                                    "definition": "#define assert(ex)  \\\n\t(__builtin_expect(!!((ex)), 1L) ? (void)0 : Assert(__FILE_NAME__, __LINE__, # ex))",
                                    "implementation": "#define assert(ex)  \\\n\t(__builtin_expect(!!((ex)), 1L) ? (void)0 : Assert(__FILE_NAME__, __LINE__, # ex))",
                                    "range": [
                                        {
                                            "line": 92,
                                            "character": 0
                                        },
                                        {
                                            "line": 93,
                                            "character": 83
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 92,
                                            "character": 8
                                        },
                                        {
                                            "line": 92,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "/*-\n * Copyright (c) 1992, 1993\n *\tThe Regents of the University of California.  All rights reserved.\n * (c) UNIX System Laboratories, Inc.\n * All or some portions of this file are derived from material licensed\n * to the University of California by American Telephone and Telegraph\n * Co. or Unix System Laboratories, Inc. and are reproduced herein with\n * the permission of UNIX System Laboratories, Inc.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *\tThis product includes software developed by the University of\n *\tCalifornia, Berkeley and its contributors.\n * 4. Neither the name of the University nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n *\t@(#)assert.h\t8.2 (Berkeley) 1/21/94\n * $FreeBSD: src/include/assert.h,v 1.4 2002/03/23 17:24:53 imp Exp $\n */\n\n#include <sys/cdefs.h>\n#ifdef __cplusplus\n#include <stdlib.h>\n#endif /* __cplusplus */\n\n/*\n * Unlike other ANSI header files, <assert.h> may usefully be included\n * multiple times, with and without NDEBUG defined.\n */",
                                    "definition": "#define\tassert(e)\t((void)0)",
                                    "implementation": "#define\tassert(e)\t((void)0)",
                                    "range": [
                                        {
                                            "line": 54,
                                            "character": 0
                                        },
                                        {
                                            "line": 54,
                                            "character": 27
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 54,
                                            "character": 8
                                        },
                                        {
                                            "line": 54,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SilInitIp2IpApi(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitIp2IpApi\n *\n * @brief   Register an Ip-2-Ip API for IpId to the API table.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP providing the API.\n * @param   Api          Input of the Ip-2-Ip API table to initialize.\n *\n * @retval  SilPass             The Ip-2-Ip API was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing Ip-2-Ip API for IP ID = %d\\n\", IpId);\r\n  SilVars->Ip2IpApi[IpId] = (uintptr_t)IpApi;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 144,
                                "character": 0
                            },
                            {
                                "line": 170,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 145,
                                "character": 0
                            },
                            {
                                "line": 145,
                                "character": 15
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "InitializeApiRcMgrPhx(SIL_CONTEXT *)",
            "kind": 11,
            "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrPhx.c",
            "documentation": "/**\n * InitializeApiRcMgrPhx\n *\n * @brief   Initialize internal and external APIs for Resource Manager\n *\n * @param   SilContext          A context structure through which host firmware defined data\n *                              can be passed to openSIL. The host firmware is responsible\n *                              for initializing the SIL_CONTEXT structure.\n * @retval  SilPass             API initialized successfully\n * @retval  SilInvalidParameter Id class is invalid\n *\n */",
            "definition": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )",
            "implementation": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )\r\n{\r\n  SIL_STATUS  Status;\r\n\r\n  // Initialize Common to Rev specific transfer table first\r\n  Status = SilInitCommon2RevXferTable(SilContext, SilId_RcManager, (void *)&mRcMgrXferPhx);\r\n  if (Status != SilPass) {\r\n    return Status;\r\n  }\r\n\r\n  return SilInitIp2IpApi(SilContext, SilId_RcManager, (void *)&mRcMgrApiPhx);\r\n}",
            "range": [
                {
                    "line": 191,
                    "character": 0
                },
                {
                    "line": 205,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 192,
                    "character": 0
                },
                {
                    "line": 192,
                    "character": 21
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrXferPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrCmn2Phx.c",
                        "documentation": "/**\n * @file  RcMgrCmn2Phx.c\n * @brief OpenSIL Resource Manager PHX transfer block functions\n *\n */",
                        "definition": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "implementation": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "range": [
                            {
                                "line": 12,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 12,
                                "character": 30
                            },
                            {
                                "line": 12,
                                "character": 43
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrApiPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrIp2IpPhx.c",
                        "documentation": "/**\n * @file RcMgrIp2IpPhx.c\n * @brief PHX RCMGR core specific transfer table functions\n *\n */",
                        "definition": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "implementation": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "range": [
                            {
                                "line": 10,
                                "character": 0
                            },
                            {
                                "line": 12,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 10,
                                "character": 16
                            },
                            {
                                "line": 10,
                                "character": 28
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SilInitCommon2RevXferTable(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitCommon2RevXferTable\n *\n * @brief   Register an IP Common to revision specific transfer table.\n *\n * @details The common to revision specific transfer table is an interface from common code to abstracted program\n *          specific code.\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   IpId        The ID of the IP providing the table.\n * @param   XferTable   Input of the transfar table to initialize.\n *\n * @retval  SilPass             The Xfer table was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The transfer table (Common2RevXferTable) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing transfer table for IP ID = %d\\n\", IpId);\r\n  SilVars->Common2RevXferTable[IpId] = (uintptr_t)XferTable;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 239,
                                "character": 0
                            },
                            {
                                "line": 265,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 240,
                                "character": 0
                            },
                            {
                                "line": 240,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SilInitIp2IpApi(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitIp2IpApi\n *\n * @brief   Register an Ip-2-Ip API for IpId to the API table.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP providing the API.\n * @param   Api          Input of the Ip-2-Ip API table to initialize.\n *\n * @retval  SilPass             The Ip-2-Ip API was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing Ip-2-Ip API for IP ID = %d\\n\", IpId);\r\n  SilVars->Ip2IpApi[IpId] = (uintptr_t)IpApi;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 144,
                                "character": 0
                            },
                            {
                                "line": 170,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 145,
                                "character": 0
                            },
                            {
                                "line": 145,
                                "character": 15
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "InitializeApiRcMgrPhx(SIL_CONTEXT *)",
            "kind": 11,
            "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrPhx.c",
            "documentation": "/**\n * InitializeApiRcMgrPhx\n *\n * @brief   Initialize internal and external APIs for Resource Manager\n *\n * @param   SilContext          A context structure through which host firmware defined data\n *                              can be passed to openSIL. The host firmware is responsible\n *                              for initializing the SIL_CONTEXT structure.\n * @retval  SilPass             API initialized successfully\n * @retval  SilInvalidParameter Id class is invalid\n *\n */",
            "definition": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )",
            "implementation": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )\r\n{\r\n  SIL_STATUS  Status;\r\n\r\n  // Initialize Common to Rev specific transfer table first\r\n  Status = SilInitCommon2RevXferTable(SilContext, SilId_RcManager, (void *)&mRcMgrXferPhx);\r\n  if (Status != SilPass) {\r\n    return Status;\r\n  }\r\n\r\n  return SilInitIp2IpApi(SilContext, SilId_RcManager, (void *)&mRcMgrApiPhx);\r\n}",
            "range": [
                {
                    "line": 191,
                    "character": 0
                },
                {
                    "line": 205,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 192,
                    "character": 0
                },
                {
                    "line": 192,
                    "character": 21
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrXferPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrCmn2Phx.c",
                        "documentation": "/**\n * @file  RcMgrCmn2Phx.c\n * @brief OpenSIL Resource Manager PHX transfer block functions\n *\n */",
                        "definition": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "implementation": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "range": [
                            {
                                "line": 12,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 12,
                                "character": 30
                            },
                            {
                                "line": 12,
                                "character": 43
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrApiPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrIp2IpPhx.c",
                        "documentation": "/**\n * @file RcMgrIp2IpPhx.c\n * @brief PHX RCMGR core specific transfer table functions\n *\n */",
                        "definition": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "implementation": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "range": [
                            {
                                "line": 10,
                                "character": 0
                            },
                            {
                                "line": 12,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 10,
                                "character": 16
                            },
                            {
                                "line": 10,
                                "character": 28
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SilInitCommon2RevXferTable(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitCommon2RevXferTable\n *\n * @brief   Register an IP Common to revision specific transfer table.\n *\n * @details The common to revision specific transfer table is an interface from common code to abstracted program\n *          specific code.\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   IpId        The ID of the IP providing the table.\n * @param   XferTable   Input of the transfar table to initialize.\n *\n * @retval  SilPass             The Xfer table was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The transfer table (Common2RevXferTable) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing transfer table for IP ID = %d\\n\", IpId);\r\n  SilVars->Common2RevXferTable[IpId] = (uintptr_t)XferTable;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 239,
                                "character": 0
                            },
                            {
                                "line": 265,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 240,
                                "character": 0
                            },
                            {
                                "line": 240,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SilInitIp2IpApi(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitIp2IpApi\n *\n * @brief   Register an Ip-2-Ip API for IpId to the API table.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP providing the API.\n * @param   Api          Input of the Ip-2-Ip API table to initialize.\n *\n * @retval  SilPass             The Ip-2-Ip API was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing Ip-2-Ip API for IP ID = %d\\n\", IpId);\r\n  SilVars->Ip2IpApi[IpId] = (uintptr_t)IpApi;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 144,
                                "character": 0
                            },
                            {
                                "line": 170,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 145,
                                "character": 0
                            },
                            {
                                "line": 145,
                                "character": 15
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "InitializeApiRcMgrPhx(SIL_CONTEXT *)",
            "kind": 11,
            "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrPhx.c",
            "documentation": "/**\n * InitializeApiRcMgrPhx\n *\n * @brief   Initialize internal and external APIs for Resource Manager\n *\n * @param   SilContext          A context structure through which host firmware defined data\n *                              can be passed to openSIL. The host firmware is responsible\n *                              for initializing the SIL_CONTEXT structure.\n * @retval  SilPass             API initialized successfully\n * @retval  SilInvalidParameter Id class is invalid\n *\n */",
            "definition": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )",
            "implementation": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )\r\n{\r\n  SIL_STATUS  Status;\r\n\r\n  // Initialize Common to Rev specific transfer table first\r\n  Status = SilInitCommon2RevXferTable(SilContext, SilId_RcManager, (void *)&mRcMgrXferPhx);\r\n  if (Status != SilPass) {\r\n    return Status;\r\n  }\r\n\r\n  return SilInitIp2IpApi(SilContext, SilId_RcManager, (void *)&mRcMgrApiPhx);\r\n}",
            "range": [
                {
                    "line": 191,
                    "character": 0
                },
                {
                    "line": 205,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 192,
                    "character": 0
                },
                {
                    "line": 192,
                    "character": 21
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrXferPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrCmn2Phx.c",
                        "documentation": "/**\n * @file  RcMgrCmn2Phx.c\n * @brief OpenSIL Resource Manager PHX transfer block functions\n *\n */",
                        "definition": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "implementation": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "range": [
                            {
                                "line": 12,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 12,
                                "character": 30
                            },
                            {
                                "line": 12,
                                "character": 43
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrApiPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrIp2IpPhx.c",
                        "documentation": "/**\n * @file RcMgrIp2IpPhx.c\n * @brief PHX RCMGR core specific transfer table functions\n *\n */",
                        "definition": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "implementation": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "range": [
                            {
                                "line": 10,
                                "character": 0
                            },
                            {
                                "line": 12,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 10,
                                "character": 16
                            },
                            {
                                "line": 10,
                                "character": 28
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SilInitCommon2RevXferTable(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitCommon2RevXferTable\n *\n * @brief   Register an IP Common to revision specific transfer table.\n *\n * @details The common to revision specific transfer table is an interface from common code to abstracted program\n *          specific code.\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   IpId        The ID of the IP providing the table.\n * @param   XferTable   Input of the transfar table to initialize.\n *\n * @retval  SilPass             The Xfer table was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The transfer table (Common2RevXferTable) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing transfer table for IP ID = %d\\n\", IpId);\r\n  SilVars->Common2RevXferTable[IpId] = (uintptr_t)XferTable;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 239,
                                "character": 0
                            },
                            {
                                "line": 265,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 240,
                                "character": 0
                            },
                            {
                                "line": 240,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SilInitIp2IpApi(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitIp2IpApi\n *\n * @brief   Register an Ip-2-Ip API for IpId to the API table.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP providing the API.\n * @param   Api          Input of the Ip-2-Ip API table to initialize.\n *\n * @retval  SilPass             The Ip-2-Ip API was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing Ip-2-Ip API for IP ID = %d\\n\", IpId);\r\n  SilVars->Ip2IpApi[IpId] = (uintptr_t)IpApi;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 144,
                                "character": 0
                            },
                            {
                                "line": 170,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 145,
                                "character": 0
                            },
                            {
                                "line": 145,
                                "character": 15
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "InitializeApiRcMgrPhx(SIL_CONTEXT *)",
            "kind": 11,
            "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrPhx.c",
            "documentation": "/**\n * InitializeApiRcMgrPhx\n *\n * @brief   Initialize internal and external APIs for Resource Manager\n *\n * @param   SilContext          A context structure through which host firmware defined data\n *                              can be passed to openSIL. The host firmware is responsible\n *                              for initializing the SIL_CONTEXT structure.\n * @retval  SilPass             API initialized successfully\n * @retval  SilInvalidParameter Id class is invalid\n *\n */",
            "definition": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )",
            "implementation": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )\r\n{\r\n  SIL_STATUS  Status;\r\n\r\n  // Initialize Common to Rev specific transfer table first\r\n  Status = SilInitCommon2RevXferTable(SilContext, SilId_RcManager, (void *)&mRcMgrXferPhx);\r\n  if (Status != SilPass) {\r\n    return Status;\r\n  }\r\n\r\n  return SilInitIp2IpApi(SilContext, SilId_RcManager, (void *)&mRcMgrApiPhx);\r\n}",
            "range": [
                {
                    "line": 191,
                    "character": 0
                },
                {
                    "line": 205,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 192,
                    "character": 0
                },
                {
                    "line": 192,
                    "character": 21
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrXferPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrCmn2Phx.c",
                        "documentation": "/**\n * @file  RcMgrCmn2Phx.c\n * @brief OpenSIL Resource Manager PHX transfer block functions\n *\n */",
                        "definition": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "implementation": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "range": [
                            {
                                "line": 12,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 12,
                                "character": 30
                            },
                            {
                                "line": 12,
                                "character": 43
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrApiPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrIp2IpPhx.c",
                        "documentation": "/**\n * @file RcMgrIp2IpPhx.c\n * @brief PHX RCMGR core specific transfer table functions\n *\n */",
                        "definition": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "implementation": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "range": [
                            {
                                "line": 10,
                                "character": 0
                            },
                            {
                                "line": 12,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 10,
                                "character": 16
                            },
                            {
                                "line": 10,
                                "character": 28
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SilInitCommon2RevXferTable(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitCommon2RevXferTable\n *\n * @brief   Register an IP Common to revision specific transfer table.\n *\n * @details The common to revision specific transfer table is an interface from common code to abstracted program\n *          specific code.\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   IpId        The ID of the IP providing the table.\n * @param   XferTable   Input of the transfar table to initialize.\n *\n * @retval  SilPass             The Xfer table was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The transfer table (Common2RevXferTable) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing transfer table for IP ID = %d\\n\", IpId);\r\n  SilVars->Common2RevXferTable[IpId] = (uintptr_t)XferTable;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 239,
                                "character": 0
                            },
                            {
                                "line": 265,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 240,
                                "character": 0
                            },
                            {
                                "line": 240,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SilInitIp2IpApi(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitIp2IpApi\n *\n * @brief   Register an Ip-2-Ip API for IpId to the API table.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP providing the API.\n * @param   Api          Input of the Ip-2-Ip API table to initialize.\n *\n * @retval  SilPass             The Ip-2-Ip API was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing Ip-2-Ip API for IP ID = %d\\n\", IpId);\r\n  SilVars->Ip2IpApi[IpId] = (uintptr_t)IpApi;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 144,
                                "character": 0
                            },
                            {
                                "line": 170,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 145,
                                "character": 0
                            },
                            {
                                "line": 145,
                                "character": 15
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "InitializeApiRcMgrPhx(SIL_CONTEXT *)",
            "kind": 11,
            "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrPhx.c",
            "documentation": "/**\n * InitializeApiRcMgrPhx\n *\n * @brief   Initialize internal and external APIs for Resource Manager\n *\n * @param   SilContext          A context structure through which host firmware defined data\n *                              can be passed to openSIL. The host firmware is responsible\n *                              for initializing the SIL_CONTEXT structure.\n * @retval  SilPass             API initialized successfully\n * @retval  SilInvalidParameter Id class is invalid\n *\n */",
            "definition": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )",
            "implementation": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )\r\n{\r\n  SIL_STATUS  Status;\r\n\r\n  // Initialize Common to Rev specific transfer table first\r\n  Status = SilInitCommon2RevXferTable(SilContext, SilId_RcManager, (void *)&mRcMgrXferPhx);\r\n  if (Status != SilPass) {\r\n    return Status;\r\n  }\r\n\r\n  return SilInitIp2IpApi(SilContext, SilId_RcManager, (void *)&mRcMgrApiPhx);\r\n}",
            "range": [
                {
                    "line": 191,
                    "character": 0
                },
                {
                    "line": 205,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 192,
                    "character": 0
                },
                {
                    "line": 192,
                    "character": 21
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrXferPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrCmn2Phx.c",
                        "documentation": "/**\n * @file  RcMgrCmn2Phx.c\n * @brief OpenSIL Resource Manager PHX transfer block functions\n *\n */",
                        "definition": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "implementation": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "range": [
                            {
                                "line": 12,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 12,
                                "character": 30
                            },
                            {
                                "line": 12,
                                "character": 43
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrApiPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrIp2IpPhx.c",
                        "documentation": "/**\n * @file RcMgrIp2IpPhx.c\n * @brief PHX RCMGR core specific transfer table functions\n *\n */",
                        "definition": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "implementation": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "range": [
                            {
                                "line": 10,
                                "character": 0
                            },
                            {
                                "line": 12,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 10,
                                "character": 16
                            },
                            {
                                "line": 10,
                                "character": 28
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SilInitCommon2RevXferTable(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitCommon2RevXferTable\n *\n * @brief   Register an IP Common to revision specific transfer table.\n *\n * @details The common to revision specific transfer table is an interface from common code to abstracted program\n *          specific code.\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   IpId        The ID of the IP providing the table.\n * @param   XferTable   Input of the transfar table to initialize.\n *\n * @retval  SilPass             The Xfer table was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The transfer table (Common2RevXferTable) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing transfer table for IP ID = %d\\n\", IpId);\r\n  SilVars->Common2RevXferTable[IpId] = (uintptr_t)XferTable;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 239,
                                "character": 0
                            },
                            {
                                "line": 265,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 240,
                                "character": 0
                            },
                            {
                                "line": 240,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SilInitIp2IpApi(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitIp2IpApi\n *\n * @brief   Register an Ip-2-Ip API for IpId to the API table.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP providing the API.\n * @param   Api          Input of the Ip-2-Ip API table to initialize.\n *\n * @retval  SilPass             The Ip-2-Ip API was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing Ip-2-Ip API for IP ID = %d\\n\", IpId);\r\n  SilVars->Ip2IpApi[IpId] = (uintptr_t)IpApi;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 144,
                                "character": 0
                            },
                            {
                                "line": 170,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 145,
                                "character": 0
                            },
                            {
                                "line": 145,
                                "character": 15
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "InitializeApiRcMgrPhx(SIL_CONTEXT *)",
            "kind": 11,
            "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrPhx.c",
            "documentation": "/**\n * InitializeApiRcMgrPhx\n *\n * @brief   Initialize internal and external APIs for Resource Manager\n *\n * @param   SilContext          A context structure through which host firmware defined data\n *                              can be passed to openSIL. The host firmware is responsible\n *                              for initializing the SIL_CONTEXT structure.\n * @retval  SilPass             API initialized successfully\n * @retval  SilInvalidParameter Id class is invalid\n *\n */",
            "definition": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )",
            "implementation": "SIL_STATUS\r\nInitializeApiRcMgrPhx (\r\n  SIL_CONTEXT  *SilContext\r\n  )\r\n{\r\n  SIL_STATUS  Status;\r\n\r\n  // Initialize Common to Rev specific transfer table first\r\n  Status = SilInitCommon2RevXferTable(SilContext, SilId_RcManager, (void *)&mRcMgrXferPhx);\r\n  if (Status != SilPass) {\r\n    return Status;\r\n  }\r\n\r\n  return SilInitIp2IpApi(SilContext, SilId_RcManager, (void *)&mRcMgrApiPhx);\r\n}",
            "range": [
                {
                    "line": 191,
                    "character": 0
                },
                {
                    "line": 205,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 192,
                    "character": 0
                },
                {
                    "line": 192,
                    "character": 21
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrXferPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrCmn2Phx.c",
                        "documentation": "/**\n * @file  RcMgrCmn2Phx.c\n * @brief OpenSIL Resource Manager PHX transfer block functions\n *\n */",
                        "definition": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "implementation": "RCMGR_COMMON_2_REV_XFER_BLOCK mRcMgrXferPhx = {\r\n  .Header = {\r\n    .Version = 1\r\n  }\r\n};",
                        "range": [
                            {
                                "line": 12,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 12,
                                "character": 30
                            },
                            {
                                "line": 12,
                                "character": 43
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "mRcMgrApiPhx",
                        "kind": 12,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/RcMgr/DfX/PHX/RcMgrIp2IpPhx.c",
                        "documentation": "/**\n * @file RcMgrIp2IpPhx.c\n * @brief PHX RCMGR core specific transfer table functions\n *\n */",
                        "definition": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "implementation": "RCMGR_IP2IP_API mRcMgrApiPhx = {\r\n  .FabricReserveMmio = FabricReserveMmio\r\n};",
                        "range": [
                            {
                                "line": 10,
                                "character": 0
                            },
                            {
                                "line": 12,
                                "character": 2
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 10,
                                "character": 16
                            },
                            {
                                "line": 10,
                                "character": 28
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SilInitCommon2RevXferTable(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitCommon2RevXferTable\n *\n * @brief   Register an IP Common to revision specific transfer table.\n *\n * @details The common to revision specific transfer table is an interface from common code to abstracted program\n *          specific code.\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   IpId        The ID of the IP providing the table.\n * @param   XferTable   Input of the transfar table to initialize.\n *\n * @retval  SilPass             The Xfer table was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitCommon2RevXferTable (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *XferTable\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The transfer table (Common2RevXferTable) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing transfer table for IP ID = %d\\n\", IpId);\r\n  SilVars->Common2RevXferTable[IpId] = (uintptr_t)XferTable;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 239,
                                "character": 0
                            },
                            {
                                "line": 265,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 240,
                                "character": 0
                            },
                            {
                                "line": 240,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SilInitIp2IpApi(SIL_CONTEXT *, SIL_DATA_BLOCK_ID, void *)",
                        "kind": 11,
                        "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilInitIp2IpApi\n *\n * @brief   Register an Ip-2-Ip API for IpId to the API table.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP providing the API.\n * @param   Api          Input of the Ip-2-Ip API table to initialize.\n *\n * @retval  SilPass             The Ip-2-Ip API was initialized for IpId.\n * @retval  SilInvalidParameter The Ip ID was outside the bounds of valid IDs defined by SIL_DATA_BLOCK_ID.\n *\n */",
                        "definition": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilInitIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                *IpApi\r\n  )\r\n{\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  assert(IpId < SilId_ListEnd);\r\n  if (IpId >= SilId_ListEnd) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n  XUSL_TRACEPOINT(SIL_TRACE_INFO, \"Initializing Ip-2-Ip API for IP ID = %d\\n\", IpId);\r\n  SilVars->Ip2IpApi[IpId] = (uintptr_t)IpApi;\r\n\r\n  XUSL_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return SilPass;\r\n}",
                        "range": [
                            {
                                "line": 144,
                                "character": 0
                            },
                            {
                                "line": 170,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 145,
                                "character": 0
                            },
                            {
                                "line": 145,
                                "character": 15
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "XUSL_TRACEPOINT(MsgLevel, Message, __VA_ARGS__)",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "implementation": "#define XUSL_TRACEPOINT(MsgLevel, Message, ...) \\\r\n        do { \\\r\n          if (SIL_DEBUG_ENABLE) { \\\r\n            ((HOST_DEBUG_SERVICE)SilTracePoint) (MsgLevel, \"SIL:xUSL:\", \\\r\n            Message, __FUNCTION__, __LINE__, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (false)",
                                    "range": [
                                        {
                                            "line": 136,
                                            "character": 0
                                        },
                                        {
                                            "line": 142,
                                            "character": 23
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 136,
                                            "character": 8
                                        },
                                        {
                                            "line": 136,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "assert(e)",
                                    "kind": 13,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/assert.h",
                                    "documentation": "",
                                    "definition": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "implementation": "#define\tassert(e) \\\n    (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __ASSERT_FILE_NAME, __LINE__, #e) : (void)0)",
                                    "range": [
                                        {
                                            "line": 73,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 100
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 8
                                        },
                                        {
                                            "line": 73,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///Users/tieuma/Documents/amd/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "__disable_tail_calls",
                                    "kind": 12,
                                    "uri": "file:///Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_assert.h",
                                    "documentation": "",
                                    "definition": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "implementation": "void __assert_rtn(const char *, const char *, int, const char *) __dead2 __cold __disable_tail_calls;",
                                    "range": [
                                        {
                                            "line": 59,
                                            "character": 0
                                        },
                                        {
                                            "line": 59,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 59,
                                            "character": 80
                                        },
                                        {
                                            "line": 59,
                                            "character": 100
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
}