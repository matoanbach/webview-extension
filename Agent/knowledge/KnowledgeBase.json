{
    "type": "callHierarchy",
    "tree": [
        {
            "name": "SmuGetOpnCorePresenceExPhx",
            "kind": 11,
            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
            "documentation": "/**\n * SmuGetOpnCorePresenceExPhx\n *\n * @brief This service retrieves information on the OPN's core thread presence with extended functionality.\n *\n * @param SystemDieNumber       Logical system die number to check.\n * @param CcdEnableMap          Pointer to the OPN default enabled CCD map.\n * @param CcdDisableMap         Pointer to the OPN disabled/removed CCD map.\n * @param CoreDisMap            Pointer to the OPN disabled core map.\n * @param CoreDisMapBufferSize  Pointer to a buffer containing the size of the CoreDisMap buffer.\n * @param CoreDisMapLength      Pointer to the OPN disabled core map length in bits.\n * @param SmtEnable             Pointer to whether or not the OPN supports SMT.\n * @param SmtEnableBufferSize   Pointer to a buffer containing the size of the SmtEnable buffer.\n *\n * @return SIL_STATUS\n *\n * @retval SilInvalidParameter  Is returned if any of the following conditions are true:\n *                              1. All CcdEnableMap, CcdDisableMap, CoreDisMap, SmtEnable are NULL\n *                              2. CoreDisMap or SmtEnable is NOT NULL, but its corresponding buffer size is.\n *                              3. CoreDisMap or SmtEnable is NOT NULL, but its corresponding size is less than the\n *                                 required size.  In this case, the corresponding buffer size value is set to the\n *                                 required buffer size and returned to the caller.\n */",
            "definition": "SIL_STATUS\r\nSmuGetOpnCorePresenceExPhx (\r\n  uint32_t  SystemDieNumber,\r\n  uint32_t  *CcdEnableMap,\r\n  uint32_t  *CcdDisableMap,\r\n  uint32_t  *CoreDisMap,\r\n  uint32_t  *CoreDisMapBufferSize,\r\n  uint32_t  *CoreDisMapLength,\r\n  bool      *SmtEnable,\r\n  uint32_t  *SmtEnableBufferSize\r\n  )",
            "implementation": "SIL_STATUS\r\nSmuGetOpnCorePresenceExPhx (\r\n  uint32_t  SystemDieNumber,\r\n  uint32_t  *CcdEnableMap,\r\n  uint32_t  *CcdDisableMap,\r\n  uint32_t  *CoreDisMap,\r\n  uint32_t  *CoreDisMapBufferSize,\r\n  uint32_t  *CoreDisMapLength,\r\n  bool      *SmtEnable,\r\n  uint32_t  *SmtEnableBufferSize\r\n  )\r\n{\r\n  return SilInvalidParameter;\r\n}",
            "range": [
                {
                    "line": 44,
                    "character": 0
                },
                {
                    "line": 57,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 45,
                    "character": 0
                },
                {
                    "line": 45,
                    "character": 26
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    }
                ]
            }
        },
        {
            "name": "SmuGetOpnCorePresencePhx",
            "kind": 11,
            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
            "documentation": "/**\n * SmuGetOpnCorePresencePhx\n * @brief This service retrieves information on the OPN's core thread presence.\n *\n * @param SilContext        A context structure through which host firmware defined data\n *                          can be passed to openSIL. The host firmware is responsible\n *                          for initializing the SIL_CONTEXT structure.\n * @param SystemDieNumber   Logical system die number to check.\n * @param CcdEnableMap      Pointer to the OPN default enabled CCD map.\n * @param CcdDisableMap     Pointer to the OPN disabled/removed CCD map.\n * @param CoreDisMap        Pointer to the OPN disabled core map.\n * @param CoreDisMapLength  Pointer to the OPN disabled core map length in bits.\n * @param SmtEnable         Pointer to whether or not the OPN supports SMT.\n *\n * @retval SilPass                            Presence info was successfully retrieved.\n */",
            "definition": "SIL_STATUS\r\nSmuGetOpnCorePresencePhx (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       SystemDieNumber,\r\n  uint32_t       *CcdEnableMap,\r\n  uint32_t       *CcdDisableMap,\r\n  uint32_t       *CoreDisMap,\r\n  uint32_t       *CoreDisMapLength,\r\n  bool           *SmtEnable\r\n  )",
            "implementation": "SIL_STATUS\r\nSmuGetOpnCorePresencePhx (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       SystemDieNumber,\r\n  uint32_t       *CcdEnableMap,\r\n  uint32_t       *CcdDisableMap,\r\n  uint32_t       *CoreDisMap,\r\n  uint32_t       *CoreDisMapLength,\r\n  bool           *SmtEnable\r\n  )\r\n{\r\n  SIL_STATUS      Status;\r\n  uint32_t        CoreFuse;\r\n\r\n  if ((CcdEnableMap == NULL) &&\r\n    (CcdDisableMap == NULL) &&\r\n    (CoreDisMap == NULL) &&\r\n    (SmtEnable == NULL)) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \"Not all pointer arguments should be NULL.\\n\");\r\n    assert(false);\r\n  }\r\n\r\n  if (CcdEnableMap != NULL) {\r\n    // Enable virtual CCD 0\r\n    *CcdEnableMap = 0x00000001;\r\n  }\r\n  if (CcdDisableMap != NULL) {\r\n    *CcdDisableMap = 0x00000000;\r\n  }\r\n\r\n  SmuRegisterReadDie(SilContext, SystemDieNumber, 0x5D528, &CoreFuse);\r\n  if (SmtEnable != NULL) {\r\n    *SmtEnable = (bool) ((CoreFuse & BIT_32(6)) != 0);\r\n  }\r\n  if (CoreDisMap != NULL) {\r\n    *CoreDisMap = (CoreFuse >> 7) & 0xFF;\r\n  }\r\n  if (CoreDisMapLength) {\r\n    *CoreDisMapLength = 8;\r\n  }\r\n\r\n  Status = SilPass;\r\n\r\n  return Status;\r\n}",
            "range": [
                {
                    "line": 75,
                    "character": 0
                },
                {
                    "line": 119,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 76,
                    "character": 0
                },
                {
                    "line": 76,
                    "character": 24
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMU_TRACEPOINT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                        "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                        "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "range": [
                            {
                                "line": 19,
                                "character": 0
                            },
                            {
                                "line": 24,
                                "character": 19
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 19,
                                "character": 8
                            },
                            {
                                "line": 19,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_ERROR",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                        "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                        "range": [
                            {
                                "line": 100,
                                "character": 0
                            },
                            {
                                "line": 100,
                                "character": 87
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 100,
                                "character": 8
                            },
                            {
                                "line": 100,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "BIT_32",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */\ntypedef enum {\n  SilPass = 0,                    ///< Success, function finished without error.\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\n  SilUnsupported,                 ///< Fail, the request is not supported.\n  SilInvalidParameter,            ///< Fail, the function was called with an\n                                  ///<   invalid parameter.\n  SilAborted,                     ///< Fail, the processing incurred an error\n                                  ///<   causing the processing to be aborted.\n                                  ///<   Host should take action.\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\n                                  ///<   due to depletion of available resources\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\n                                  ///<   the ID unique identifier used.\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\n  SilDeviceError,                 ///< Fail, device being initialized reported\n                                  ///<   an error. Check if the IP output block\n                                  ///<   has more information.\n\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\n                                  ///<   condition requiring the Host to perform\n                                  ///<   a system reset\n                                  ///< requesting Host do immediate cold reset\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\n} SIL_STATUS;\n\n/* *********************************************************************************************************************\n * Common Variables\n */",
                        "definition": "#define BIT_32(X)    (uint32_t)(1ul << (X))",
                        "implementation": "#define BIT_32(X)    (uint32_t)(1ul << (X))",
                        "range": [
                            {
                                "line": 81,
                                "character": 0
                            },
                            {
                                "line": 81,
                                "character": 43
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 81,
                                "character": 8
                            },
                            {
                                "line": 81,
                                "character": 14
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SmuRegisterReadDie",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.c",
                        "documentation": "/**\n * SmuRegisterReadDie\n *\n * @brief   Reads a 32-bit register from SMU register space (Generally intended\n *          for NBIO internal requests)\n *\n * @param   SilContext    A context structure through which host firmware defined data\n *                        can be passed to openSIL. The host firmware is responsible\n *                        for initializing the SIL_CONTEXT structure.\n * @param   InstanceId    The unique identifier of the NBIO instance associated\n *                        with this socket/die\n * @param   RegisterIndex The index of the register to be read\n * @param   RegisterValue Pointer to a UINT32 to store the value read from the\n *                        register\n *\n * @return  SIL_STATUS\n *\n * @retval  SilPass             The specified register has been read\n * @retval  SilInvalidParameter One of the input parameters was invalid\n *                              InstanceId did not reference a valid NBIO\n *                              instance\n * @retval  SilUnsupported      This function is not supported by this version\n *                              of the driver\n *\n **/",
                        "definition": "SIL_STATUS\r\nSmuRegisterReadDie (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  uint32_t       RegisterIndex,\r\n  uint32_t       *RegisterValue\r\n  )",
                        "implementation": "SIL_STATUS\r\nSmuRegisterReadDie (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  uint32_t       RegisterIndex,\r\n  uint32_t       *RegisterValue\r\n  )\r\n{\r\n  GNB_HANDLE *GnbHandle;\r\n  SIL_STATUS Status;\r\n  PCI_ADDR   PcieAddress;\r\n\r\n  Status = SmuGetGnbHandleCommon(SilContext, InstanceId, &GnbHandle);\r\n  if (Status == SilPass) {\r\n    PcieAddress.AddressValue = GnbHandle->Address.AddressValue;\r\n    xUSLIndirectPciRead32(PcieAddress.AddressValue, RegisterIndex, RegisterValue);\r\n  }\r\n  return Status;\r\n}",
                        "range": [
                            {
                                "line": 211,
                                "character": 0
                            },
                            {
                                "line": 229,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 212,
                                "character": 0
                            },
                            {
                                "line": 212,
                                "character": 18
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "GNB_HANDLE",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/GnbDxio.h",
                                    "documentation": "",
                                    "definition": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                    "implementation": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                    "range": [
                                        {
                                            "line": 555,
                                            "character": 0
                                        },
                                        {
                                            "line": 555,
                                            "character": 39
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 555,
                                            "character": 28
                                        },
                                        {
                                            "line": 555,
                                            "character": 38
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "PCI_ADDR",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/Pci.h",
                                    "documentation": "/// Union type for PCI address",
                                    "definition": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                                    "implementation": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                                    "range": [
                                        {
                                            "line": 43,
                                            "character": 0
                                        },
                                        {
                                            "line": 46,
                                            "character": 11
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 46,
                                            "character": 2
                                        },
                                        {
                                            "line": 46,
                                            "character": 10
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SmuGetGnbHandleCommon",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.c",
                                    "documentation": "/**\n * SmuGetGnbHandleCommon\n *\n * @brief   Return GNB_HANDLE of Nbio InstanceId\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   InstanceId  The unique identifier of the SMU instance associated\n *                      with this socket (for GN, the socket number)\n * @param   Handle      Pointer to GNB_HANDLE* to return GNB_HANDLE of this\n *                      InstanceId\n *\n * @retval  SilPass             GnbHandle is found associated with socket\n *                              number\n * @retval  SilInvalidParameter InstanceId did not reference a valid NBIO\n *                              instance\n **/",
                                    "definition": "SIL_STATUS\r\nSmuGetGnbHandleCommon (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  GNB_HANDLE     **Handle\r\n  )",
                                    "implementation": "SIL_STATUS\r\nSmuGetGnbHandleCommon (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  GNB_HANDLE     **Handle\r\n  )\r\n{\r\n  SIL_STATUS            Status;\r\n  bool                  InstanceFound;\r\n  GNB_HANDLE            *GnbHandle;\r\n  NBIO_IP2IP_API        *NbioIp2Ip;\r\n\r\n  Status = SilInvalidParameter;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  if (SilGetIp2IpApi(SilContext, SilId_NbioClass, (void **)(&NbioIp2Ip)) != SilPass) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \" NBIO API is not found.\\n\");\r\n    return SilNotFound;\r\n  }\r\n  GnbHandle = NbioIp2Ip->GetGnbHandle(SilContext);\r\n\r\n  InstanceFound = false;\r\n  while ((InstanceFound == false) && (GnbHandle != NULL)) {\r\n    if (GnbHandle->SocketId == InstanceId) {\r\n      InstanceFound = true;\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"Instance found.\\n\");\r\n      Status = SilPass;\r\n    } else {\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"Gnb next handle.\\n\");\r\n      GnbHandle = GnbGetNextHandle(GnbHandle);\r\n    }\r\n  }\r\n\r\n  *Handle = GnbHandle;\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Exit Status: 0x%x\\n\", Status);\r\n  return Status;\r\n}",
                                    "range": [
                                        {
                                            "line": 96,
                                            "character": 0
                                        },
                                        {
                                            "line": 133,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 97,
                                            "character": 0
                                        },
                                        {
                                            "line": 97,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SIL_STATUS",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                                "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                                "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                "range": [
                                                    {
                                                        "line": 49,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 74,
                                                        "character": 13
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 74,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 74,
                                                        "character": 12
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_CONTEXT",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                                "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                                "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                "range": [
                                                    {
                                                        "line": 131,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 135,
                                                        "character": 14
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 135,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 135,
                                                        "character": 13
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "GNB_HANDLE",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/GnbDxio.h",
                                                "documentation": "",
                                                "definition": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                                "implementation": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                                "range": [
                                                    {
                                                        "line": 555,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 555,
                                                        "character": 39
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 555,
                                                        "character": 28
                                                    },
                                                    {
                                                        "line": 555,
                                                        "character": 38
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "NBIO_IP2IP_API",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/NbioIp2Ip.h",
                                                "documentation": "// Define the Ip2Ip API as a struct containing pointers to the above functions",
                                                "definition": "typedef struct {\r\n  NBIO_GET_HANDLE                                  NbioGetHandle;\r\n  NBIO_GET_GNB_HANDLE                              GetGnbHandle;\r\n  NBIO_PCIE_CONFIG_DEBUG_DUMP                      PcieConfigDebugDump;\r\n  NBIO_GET_HOST_PCI_ADDRESS                        GetHostPciAddress;\r\n  NBIO_PCIE_CONFIG_GET_CHILD                       PcieConfigGetChild;\r\n  NBIO_PCIE_CONFIG_GET_PARENT                      PcieConfigGetParent;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES          PcieConfigRunProcForAllEngines;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES_WRAPPER  PcieConfigRunProcForAllEnginesInWrapper;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS         PcieConfigRunProcForAllWrappers;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS_NBIO    PcieConfigRunProcForAllWrappersInNbio;\r\n  NBIO_PCIE_CONFIG_CHECK_PORT_STATUS               PcieConfigCheckPortStatus;\r\n} NBIO_IP2IP_API;",
                                                "implementation": "typedef struct {\r\n  NBIO_GET_HANDLE                                  NbioGetHandle;\r\n  NBIO_GET_GNB_HANDLE                              GetGnbHandle;\r\n  NBIO_PCIE_CONFIG_DEBUG_DUMP                      PcieConfigDebugDump;\r\n  NBIO_GET_HOST_PCI_ADDRESS                        GetHostPciAddress;\r\n  NBIO_PCIE_CONFIG_GET_CHILD                       PcieConfigGetChild;\r\n  NBIO_PCIE_CONFIG_GET_PARENT                      PcieConfigGetParent;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES          PcieConfigRunProcForAllEngines;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES_WRAPPER  PcieConfigRunProcForAllEnginesInWrapper;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS         PcieConfigRunProcForAllWrappers;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS_NBIO    PcieConfigRunProcForAllWrappersInNbio;\r\n  NBIO_PCIE_CONFIG_CHECK_PORT_STATUS               PcieConfigCheckPortStatus;\r\n} NBIO_IP2IP_API;",
                                                "range": [
                                                    {
                                                        "line": 83,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 95,
                                                        "character": 17
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 95,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 95,
                                                        "character": 16
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SMU_TRACEPOINT",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                                                "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                                                "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                                "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                                "range": [
                                                    {
                                                        "line": 19,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 24,
                                                        "character": 19
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 19,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 19,
                                                        "character": 22
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_TRACE_ENTRY",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                                "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                                "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                                "range": [
                                                    {
                                                        "line": 102,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 102,
                                                        "character": 70
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 102,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 102,
                                                        "character": 23
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_TRACE_ERROR",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                                "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                "range": [
                                                    {
                                                        "line": 100,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 100,
                                                        "character": 87
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 100,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 100,
                                                        "character": 23
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_TRACE_INFO",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                                "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                                "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                                "range": [
                                                    {
                                                        "line": 104,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 104,
                                                        "character": 118
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 104,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 104,
                                                        "character": 22
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "GnbGetNextHandle",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/NbioPcieTopologyHelper.h",
                                                "documentation": "",
                                                "definition": "#define GnbGetNextHandle(Descriptor) \\\r\n        (GNB_HANDLE *) PcieConfigGetNextTopologyDescriptor(Descriptor, DESCRIPTOR_TERMINATE_TOPOLOGY)",
                                                "implementation": "#define GnbGetNextHandle(Descriptor) \\\r\n        (GNB_HANDLE *) PcieConfigGetNextTopologyDescriptor(Descriptor, DESCRIPTOR_TERMINATE_TOPOLOGY)",
                                                "range": [
                                                    {
                                                        "line": 77,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 78,
                                                        "character": 101
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 77,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 77,
                                                        "character": 24
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SilGetIp2IpApi",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                                                "documentation": "/**\n * SilGetIp2IpApi\n *\n * @details This function is used by openSIL IPs to find and return a pointer to the Ip-2-Ip API installed for the\n *          specified IP ID.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP block to request the Ip-2-Ip API for.  The list of\n *                       valid Ids is defined in xSIM-api.h.\n * @param   Api          Upon success, this output is a pointer to the Ip-2-Ip API.\n *\n * @returns SIL_STATUS\n * @retval  SilPass     The Api was found and returned in the Api pointer\n * @retval  SilNotFound No API was installed for IP\n *\n */",
                                                "definition": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )",
                                                "implementation": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )\r\n{\r\n  SIL_STATUS          Status;\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  // Comment this TRACEPOINT to reduce debug output\r\n  //XUSL_TRACEPOINT (SIL_TRACE_INFO, \"Get Ip-2-Ip API for IP ID %d\\n\", IpId);\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n\r\n  Status = SilPass;\r\n\r\n  *Api = (void *)((uintptr_t)SilVars->Ip2IpApi[IpId]);\r\n  if (*Api == NULL) {\r\n    Status = SilNotFound;\r\n    XUSL_TRACEPOINT(SIL_TRACE_ERROR, \"Ip-2-Ip API for IP ID %d NOT FOUND!\\n\", IpId);\r\n    assert(*Api != NULL);// Assert if the requested API is null\r\n  }\r\n\r\n  return Status;\r\n}",
                                                "range": [
                                                    {
                                                        "line": 190,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 219,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 191,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 191,
                                                        "character": 14
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "SIL_STATUS",
                                                            "kind": 10,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                                            "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                                            "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                            "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                            "range": [
                                                                {
                                                                    "line": 49,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 74,
                                                                    "character": 13
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 74,
                                                                    "character": 2
                                                                },
                                                                {
                                                                    "line": 74,
                                                                    "character": 12
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        },
                                                        {
                                                            "name": "SIL_CONTEXT",
                                                            "kind": 10,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                                            "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                                            "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                            "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                            "range": [
                                                                {
                                                                    "line": 131,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 135,
                                                                    "character": 14
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 135,
                                                                    "character": 2
                                                                },
                                                                {
                                                                    "line": 135,
                                                                    "character": 13
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        },
                                                        {
                                                            "name": "SIL_DATA_BLOCK_ID",
                                                            "kind": 10,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                                            "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                                            "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                                            "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                                            "range": [
                                                                {
                                                                    "line": 48,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 73,
                                                                    "character": 20
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 73,
                                                                    "character": 2
                                                                },
                                                                {
                                                                    "line": 73,
                                                                    "character": 19
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        },
                                                        {
                                                            "name": "SIL_BLOCK_VARIABLES",
                                                            "kind": 10,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                            "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                                            "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                                            "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                                            "range": [
                                                                {
                                                                    "line": 182,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 193,
                                                                    "character": 22
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 193,
                                                                    "character": 2
                                                                },
                                                                {
                                                                    "line": 193,
                                                                    "character": 21
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        },
                                                        {
                                                            "name": "SilVars",
                                                            "kind": 12,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/UnitTest/Source/xSIM/xSimAssignMemoryTp1Ut/xSimAssignMemoryTp1Ut.c",
                                                            "documentation": "/**\n * @file xSimAssignMemoryTp1Ut.c\n * @brief    This UT will test xSimAssignMemoryTp1.\n * @details: It will also test static functions:\n *\n * Unit test implementation: xSimClearIpApis, xSimInitializeIpApis, GetActiveSocIpListTp1\n *\n * xSimAssignMemoryTp1Ut Iteration definitions\n *\n * ClearIpApis:     This iteration is will test the clearing of API buffers\n *                  (I2I/C2R). The buffer defaults are 0xffffffffffffffff for\n *                  index 0, 8, 16. A passing case will result in those indices\n *                  being set to 0.\n * BadSocIpListTp1: This iteration is will test xSimAssignMemoryTp1 when\n *                  GetActiveSocIpListTp1 returns error\n * BadInitIpApis:   This iteration will test execution path of xSimInitializeIpApis\n *                  when LclIpRecord->ApiInit is non-NULL and returns a bad status.\n *                  It will also cover xSimAssignMemoryTp1 branch when\n *                  xSimInitializeIpApis returns a bad status.\n * OutOfResources:  This iteration will test the case when xSimAssignMemoryTp1 returns\n *                  OutOfResources.\n * SetInputBadStatus: This iteration will test the case when LclIpRecord->SetInput\n *                    in xSimAssignMemoryTp1 returns a bad status.\n * AssignMemoryTp1: This iteration will test the default (all good) execution path of xSimAssignMemoryTp1.\n *\n */\n\n#include <UtBaseLib.h>\n#include <xSIM.h>\n#include <UtLogLib.h>\n#include <stdlib.h>\n#include <time.h>\n#include <SilSocLogicalId.h>\n#include <Library/UtSocLogicalIdMockLib.h>\n#include \"xSimAssignMemoryTp1Ut.h\"\n\n// Variables used for ClearIpApis iteration\n\n/*\n * This structure is used to test the clearing of API buffers in xSimClearIpApis\n * in iteration \"ClearIpApis\"\n */",
                                                            "definition": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                                            "implementation": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                                            "range": [
                                                                {
                                                                    "line": 44,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 51,
                                                                    "character": 2
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 44,
                                                                    "character": 20
                                                                },
                                                                {
                                                                    "line": 44,
                                                                    "character": 27
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        },
                                                        {
                                                            "name": "SilVars",
                                                            "kind": 12,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/UnitTest/Source/xSIM/xSimAssignMemoryTp2Ut/xSimAssignMemoryTp2Ut.c",
                                                            "documentation": "/**\n * @file xSimAssignMemoryTp2Ut.c\n * @brief    This UT will test xSimAssignMemoryTp2.\n * @details: It will also test static functions:\n *\n * Unit test implementation: xSimClearIpApis, xSimInitializeIpApis, GetActiveSocIpListTp2\n *\n * xSimAssignMemoryTp2Ut Iteration definitions\n *\n * ClearIpApis:     This iteration is will test the clearing of API buffers\n *                  (I2I/C2R). The buffer defaults are 0xffffffffffffffff for\n *                  index 0, 8, 16. A passing case will result in those indices\n *                  being set to 0.\n * BadSocIpListTp2: This iteration is will test xSimAssignMemoryTp2 when\n *                  GetActiveSocIpListTp2 returns error\n * BadInitIpApis:   This iteration will test execution path of xSimInitializeIpApis\n *                  when LclIpRecord->ApiInit is non-NULL and returns a bad status.\n *                  It will also cover xSimAssignMemoryTp2 branch when\n *                  xSimInitializeIpApis returns a bad status.\n * AssignMemoryTp2: This iteration will test the default (all good) execution path of xSimAssignMemoryTp2.\n *\n */\n\n#include <UtBaseLib.h>\n#include <xSIM.h>\n#include <UtLogLib.h>\n#include <stdlib.h>\n#include <time.h>\n#include <SilSocLogicalId.h>\n#include <Library/UtSocLogicalIdMockLib.h>\n#include \"xSimAssignMemoryTp2Ut.h\"\n\n// Variables used for ClearIpApis iteration\n\n/*\n * This structure is used to test the clearing of API buffers in xSimClearIpApis\n * in iteration \"ClearIpApis\"\n */",
                                                            "definition": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                                            "implementation": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                                            "range": [
                                                                {
                                                                    "line": 40,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 47,
                                                                    "character": 2
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 40,
                                                                    "character": 20
                                                                },
                                                                {
                                                                    "line": 40,
                                                                    "character": 27
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        },
                                                        {
                                                            "name": "SilVars",
                                                            "kind": 12,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/UnitTest/Source/xSIM/xSimAssignMemoryTp3Ut/xSimAssignMemoryTp3Ut.c",
                                                            "documentation": "/**\n * @file xSimAssignMemoryTp3Ut.c\n * @brief    This UT will test xSimAssignMemoryTp3.\n * @details: It will also test static functions:\n *\n * Unit test implementation: xSimClearIpApis, xSimInitializeIpApis, GetActiveSocIpListTp3\n *\n * xSimAssignMemoryTp3Ut Iteration definitions\n *\n * ClearIpApis:     This iteration is will test the clearing of API buffers\n *                  (I2I/C2R). The buffer defaults are 0xffffffffffffffff for\n *                  index 0, 8, 16. A passing case will result in those indices\n *                  being set to 0.\n * BadSocIpListTp3: This iteration is will test xSimAssignMemoryTp3 when\n *                  GetActiveSocIpListTp3 returns error\n * BadInitIpApis:   This iteration will test execution path of xSimInitializeIpApis\n *                  when LclIpRecord->ApiInit is non-NULL and returns a bad status.\n *                  It will also cover xSimAssignMemoryTp3 branch when\n *                  xSimInitializeIpApis returns a bad status.\n * AssignMemoryTp3: This iteration will test the default (all good) execution path of xSimAssignMemoryTp3.\n *\n */\n\n#include <UtBaseLib.h>\n#include <xSIM.h>\n#include <UtLogLib.h>\n#include <stdlib.h>\n#include <time.h>\n#include <SilSocLogicalId.h>\n#include <Library/UtSocLogicalIdMockLib.h>\n#include \"xSimAssignMemoryTp3Ut.h\"\n\n// Variables used for ClearIpApis iteration\n\n/*\n * This structure is used to test the clearing of API buffers in xSimClearIpApis\n * in iteration \"ClearIpApis\"\n */",
                                                            "definition": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                                            "implementation": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                                            "range": [
                                                                {
                                                                    "line": 40,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 47,
                                                                    "character": 2
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 40,
                                                                    "character": 20
                                                                },
                                                                {
                                                                    "line": 40,
                                                                    "character": 27
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        },
                                                        {
                                                            "name": "SilVars",
                                                            "kind": 12,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/UnitTest/Source/xSIM/xSimClearIpApisUt/xSimClearIpApisUt.c",
                                                            "documentation": "/**\n * @file xSimClearIpApisUt.c\n * @brief    This UT will test xSimAssignMemoryTp1.\n * @details: It will also test static functions:\n *\n * Unit test implementation: xSimClearIpApis, xSimInitializeIpApis, GetActiveSocIpListTp1\n *\n * xSimClearIpApisUt Iteration definitions\n *\n * ClearIpApis:     This iteration is will test the clearing of API buffers\n *                  (I2I/C2R). The buffer defaults are 0xffffffffffffffff for\n *                  index 0, 8, 16. A passing case will result in those indices\n *                  being set to 0.\n *\n */\n\n#include <UtBaseLib.h>\n#include <xSIM.h>\n#include <UtLogLib.h>\n#include <stdlib.h>\n#include <time.h>\n#include <IpHandler.h>\n#include \"xSimClearIpApisUt.h\"\n\n// Variables used for ClearIpApis iteration\n\n/*\n * SOC_IP_TABLE for Tp1/2/3 are included only to resolve linker issues. They are not used.\n */\n// TP1 SoC IP Tables\nconst SOC_IP_TABLE *mPlatformSocsTp1[] = {\n  NULL  // End of list marker\n};\n\n// TP2 SoC IP Tables\nconst SOC_IP_TABLE *mPlatformSocsTp2[] = {\n  NULL  // End of list marker\n};\n\n// TP3 SoC IP Tables\nconst SOC_IP_TABLE *mPlatformSocsTp3[] = {\n  NULL  // End of list marker\n};\n\n/*\n * This structure is used to test the clearing of API buffers in xSimClearIpApis\n * in iteration \"ClearIpApis\"\n */",
                                                            "definition": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                                            "implementation": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                                            "range": [
                                                                {
                                                                    "line": 50,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 57,
                                                                    "character": 2
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 50,
                                                                    "character": 20
                                                                },
                                                                {
                                                                    "line": 50,
                                                                    "character": 27
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        },
                                                        {
                                                            "name": "SIL_TRACE_ERROR",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                            "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                                            "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                            "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                            "range": [
                                                                {
                                                                    "line": 100,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 100,
                                                                    "character": 87
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 100,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 100,
                                                                    "character": 23
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "xUSLIndirectPciRead32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Indirect Pci Read Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         pointer to hold read value.\n *\n */",
                                    "definition": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)",
                                    "implementation": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  *Value = xUSLPciRead32(PciBase + sizeof (uint32_t));\r\n}",
                                    "range": [
                                        {
                                            "line": 162,
                                            "character": 0
                                        },
                                        {
                                            "line": 167,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 162,
                                            "character": 5
                                        },
                                        {
                                            "line": 162,
                                            "character": 26
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SMNx00B8",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                                "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                "definition": "#define SMNx00B8  0x00B8",
                                                "implementation": "#define SMNx00B8  0x00B8",
                                                "range": [
                                                    {
                                                        "line": 11,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 24
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 11,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 16
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "xUSLPciWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                                "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                                "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 80,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 83,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 80,
                                                        "character": 5
                                                    },
                                                    {
                                                        "line": 80,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressWrite32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                            "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 46,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 19
                                                                },
                                                                {
                                                                    "line": 43,
                                                                    "character": 40
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "xUSLPciRead32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Read 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n *\n */",
                                                "definition": "uint32_t xUSLPciRead32 (uint32_t Address)",
                                                "implementation": "uint32_t xUSLPciRead32 (uint32_t Address)\r\n{\r\n  return xUSLPciExpressRead32((void *)(size_t)Address);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 68,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 71,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 68,
                                                        "character": 9
                                                    },
                                                    {
                                                        "line": 68,
                                                        "character": 22
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressRead32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)",
                                                            "implementation": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)\r\n{\r\n  return *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS));\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 23,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 26,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 23,
                                                                    "character": 23
                                                                },
                                                                {
                                                                    "line": 23,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "SmuServiceRequestPhx",
            "kind": 11,
            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
            "documentation": "/**\n * SmuServiceRequestPhx\n *\n * @brief   SMU service request for PHX\n *\n * @param   PciAddress      PCI_ADDR of this NBIO\n * @param   RequestId       BIOS to SMU Message ID\n * @param   RequestArgument Request Argument\n * @param   AccessFlags     See GNB_ACCESS_FLAGS_* definitions\n *\n * @retval  SMC_RESULT\n */",
            "definition": "SMC_RESULT\r\nSmuServiceRequestPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )",
            "implementation": "SMC_RESULT\r\nSmuServiceRequestPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )\r\n{\r\n  uint32_t SmuMessageResponse;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  if (RequestId > SMC_Message_Count_PHX) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \"SmuServiceRequest INVALID!!.\\n\");\r\n    return SMC_Result_OK;\r\n  }\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Service Request 0x%x\\n\", RequestId);\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n    \"Service Request Argument 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\\n\",\r\n    RequestArgument[0],\r\n    RequestArgument[1],\r\n    RequestArgument[2],\r\n    RequestArgument[3],\r\n    RequestArgument[4],\r\n    RequestArgument[5]\r\n    );\r\n\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n\r\n  // 1 Clear Response\r\n  SmuMessageResponse = 0;\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10578, SmuMessageResponse);\r\n\r\n  // 2 Write message arguments\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10998, RequestArgument[0]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B1099C, RequestArgument[1]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A0, RequestArgument[2]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A4, RequestArgument[3]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A8, RequestArgument[4]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109AC, RequestArgument[5]);\r\n\r\n  // 3 Write message ID\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10528, (uint32_t)RequestId);\r\n\r\n  // 4 Poll Response until non-zero\r\n  do {\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n    SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n      \"Poll SMU Message Response until non-zero!! Current SMU Message Response 0x%x\\n\",\r\n      SmuMessageResponse\r\n      );\r\n  } while (SmuMessageResponse == 0x0);\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"After SMU Message Responded!!\\n\");\r\n\r\n  if ((SMC_RESULT)SmuMessageResponse == SMC_Result_Fatal) {\r\n    assert((SMC_RESULT)SmuMessageResponse != SMC_Result_Fatal);\r\n    return SMC_Result_Fatal;\r\n  }\r\n\r\n  // 5 Read updated SMU message arguments\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10998, &RequestArgument[0]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B1099C, &RequestArgument[1]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A0, &RequestArgument[2]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A4, &RequestArgument[3]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A8, &RequestArgument[4]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109AC, &RequestArgument[5]);\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return (SMC_RESULT)SmuMessageResponse;\r\n}",
            "range": [
                {
                    "line": 133,
                    "character": 0
                },
                {
                    "line": 203,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 134,
                    "character": 0
                },
                {
                    "line": 134,
                    "character": 20
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SMC_RESULT",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                        "documentation": "/// SMU Response Codes",
                        "definition": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                        "implementation": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                        "range": [
                            {
                                "line": 13,
                                "character": 0
                            },
                            {
                                "line": 20,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 20,
                                "character": 2
                            },
                            {
                                "line": 20,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "PCI_ADDR",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/Pci.h",
                        "documentation": "/// Union type for PCI address",
                        "definition": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                        "implementation": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                        "range": [
                            {
                                "line": 43,
                                "character": 0
                            },
                            {
                                "line": 46,
                                "character": 11
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 46,
                                "character": 2
                            },
                            {
                                "line": 46,
                                "character": 10
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMU_TRACEPOINT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                        "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                        "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "range": [
                            {
                                "line": 19,
                                "character": 0
                            },
                            {
                                "line": 24,
                                "character": 19
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 19,
                                "character": 8
                            },
                            {
                                "line": 19,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_ENTRY",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                        "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                        "range": [
                            {
                                "line": 102,
                                "character": 0
                            },
                            {
                                "line": 102,
                                "character": 70
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 102,
                                "character": 8
                            },
                            {
                                "line": 102,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMC_Message_Count_PHX",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.h",
                        "documentation": "/// BIOS to SMU Message Definitions for Phoenix",
                        "definition": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                        "implementation": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                        "range": [
                            {
                                "line": 14,
                                "character": 0
                            },
                            {
                                "line": 14,
                                "character": 95
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 14,
                                "character": 8
                            },
                            {
                                "line": 14,
                                "character": 29
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_ERROR",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                        "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                        "range": [
                            {
                                "line": 100,
                                "character": 0
                            },
                            {
                                "line": 100,
                                "character": 87
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 100,
                                "character": 8
                            },
                            {
                                "line": 100,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_INFO",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "range": [
                            {
                                "line": 104,
                                "character": 0
                            },
                            {
                                "line": 104,
                                "character": 118
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 104,
                                "character": 8
                            },
                            {
                                "line": 104,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B10578",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B10578   0x3B10578UL",
                        "implementation": "#define MP1MMIOx3B10578   0x3B10578UL",
                        "range": [
                            {
                                "line": 22,
                                "character": 0
                            },
                            {
                                "line": 22,
                                "character": 37
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 22,
                                "character": 8
                            },
                            {
                                "line": 22,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B10998",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B10998 0x3B10998ul",
                        "implementation": "#define MP1MMIOx3B10998 0x3B10998ul",
                        "range": [
                            {
                                "line": 15,
                                "character": 0
                            },
                            {
                                "line": 15,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 15,
                                "character": 8
                            },
                            {
                                "line": 15,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B1099C",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                        "implementation": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                        "range": [
                            {
                                "line": 16,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 16,
                                "character": 8
                            },
                            {
                                "line": 16,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109A0",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                        "implementation": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                        "range": [
                            {
                                "line": 17,
                                "character": 0
                            },
                            {
                                "line": 17,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 17,
                                "character": 8
                            },
                            {
                                "line": 17,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109A4",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                        "implementation": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                        "range": [
                            {
                                "line": 18,
                                "character": 0
                            },
                            {
                                "line": 18,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 18,
                                "character": 8
                            },
                            {
                                "line": 18,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109A8",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                        "implementation": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                        "range": [
                            {
                                "line": 19,
                                "character": 0
                            },
                            {
                                "line": 19,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 19,
                                "character": 8
                            },
                            {
                                "line": 19,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109AC",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109AC 0x3B109ACul",
                        "implementation": "#define MP1MMIOx3B109AC 0x3B109ACul",
                        "range": [
                            {
                                "line": 20,
                                "character": 0
                            },
                            {
                                "line": 20,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 20,
                                "character": 8
                            },
                            {
                                "line": 20,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B10528",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B10528    0x3B10528ul",
                        "implementation": "#define MP1MMIOx3B10528    0x3B10528ul",
                        "range": [
                            {
                                "line": 21,
                                "character": 0
                            },
                            {
                                "line": 21,
                                "character": 38
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 21,
                                "character": 8
                            },
                            {
                                "line": 21,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_EXIT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                        "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                        "range": [
                            {
                                "line": 103,
                                "character": 0
                            },
                            {
                                "line": 103,
                                "character": 69
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 103,
                                "character": 8
                            },
                            {
                                "line": 103,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "xUSLIndirectPciRead32",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                        "documentation": "/**\n * @brief Indirect Pci Read Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         pointer to hold read value.\n *\n */",
                        "definition": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)",
                        "implementation": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  *Value = xUSLPciRead32(PciBase + sizeof (uint32_t));\r\n}",
                        "range": [
                            {
                                "line": 162,
                                "character": 0
                            },
                            {
                                "line": 167,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 162,
                                "character": 5
                            },
                            {
                                "line": 162,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMNx00B8",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                    "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                    "definition": "#define SMNx00B8  0x00B8",
                                    "implementation": "#define SMNx00B8  0x00B8",
                                    "range": [
                                        {
                                            "line": 11,
                                            "character": 0
                                        },
                                        {
                                            "line": 11,
                                            "character": 24
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 11,
                                            "character": 8
                                        },
                                        {
                                            "line": 11,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "xUSLPciWrite32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                    "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                    "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                    "range": [
                                        {
                                            "line": 80,
                                            "character": 0
                                        },
                                        {
                                            "line": 83,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 80,
                                            "character": 5
                                        },
                                        {
                                            "line": 80,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "xUSLPciExpressWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                "documentation": "",
                                                "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                "range": [
                                                    {
                                                        "line": 43,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 46,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 43,
                                                        "character": 19
                                                    },
                                                    {
                                                        "line": 43,
                                                        "character": 40
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                            "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "range": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 32
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "xUSLPciRead32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Read 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n *\n */",
                                    "definition": "uint32_t xUSLPciRead32 (uint32_t Address)",
                                    "implementation": "uint32_t xUSLPciRead32 (uint32_t Address)\r\n{\r\n  return xUSLPciExpressRead32((void *)(size_t)Address);\r\n}",
                                    "range": [
                                        {
                                            "line": 68,
                                            "character": 0
                                        },
                                        {
                                            "line": 71,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 68,
                                            "character": 9
                                        },
                                        {
                                            "line": 68,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "xUSLPciExpressRead32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                "documentation": "",
                                                "definition": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)",
                                                "implementation": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)\r\n{\r\n  return *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS));\r\n}",
                                                "range": [
                                                    {
                                                        "line": 23,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 26,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 23,
                                                        "character": 23
                                                    },
                                                    {
                                                        "line": 23,
                                                        "character": 43
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                            "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "range": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 32
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "xUSLIndirectPciWrite32",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                        "documentation": "/**\n * @brief Indirect Pci Write Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         The value to be written.\n *\n */",
                        "definition": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)",
                        "implementation": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  xUSLPciWrite32(PciBase + sizeof (uint32_t), Value);\r\n}",
                        "range": [
                            {
                                "line": 176,
                                "character": 0
                            },
                            {
                                "line": 181,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 176,
                                "character": 5
                            },
                            {
                                "line": 176,
                                "character": 27
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMNx00B8",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                    "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                    "definition": "#define SMNx00B8  0x00B8",
                                    "implementation": "#define SMNx00B8  0x00B8",
                                    "range": [
                                        {
                                            "line": 11,
                                            "character": 0
                                        },
                                        {
                                            "line": 11,
                                            "character": 24
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 11,
                                            "character": 8
                                        },
                                        {
                                            "line": 11,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "xUSLPciWrite32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                    "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                    "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                    "range": [
                                        {
                                            "line": 80,
                                            "character": 0
                                        },
                                        {
                                            "line": 83,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 80,
                                            "character": 5
                                        },
                                        {
                                            "line": 80,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "xUSLPciExpressWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                "documentation": "",
                                                "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                "range": [
                                                    {
                                                        "line": 43,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 46,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 43,
                                                        "character": 19
                                                    },
                                                    {
                                                        "line": 43,
                                                        "character": 40
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                            "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "range": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 32
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "SmuServiceRequestOnlyPhx",
            "kind": 11,
            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
            "documentation": "/**\n * SmuServiceRequestOnlyPhx\n *\n * @brief   SMU service request for PHX\n *\n * @details This function differs from SmuServiceRequestRs in that is send the SMU request but does not wait for\n *          a response.\n *\n * @param   PciAddress      PCI_ADDR of this NBIO\n * @param   RequestId       BIOS to SMU Message ID\n * @param   RequestArgument Request Argument\n * @param   AccessFlags     See GNB_ACCESS_FLAGS_* definitions\n *\n * @retval  SMC_RESULT\n */",
            "definition": "SMC_RESULT\r\nSmuServiceRequestOnlyPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )",
            "implementation": "SMC_RESULT\r\nSmuServiceRequestOnlyPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )\r\n{\r\n  uint32_t SmuMessageResponse;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  if (RequestId > SMC_Message_Count_PHX) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \"SmuServiceRequest INVALID!!.\\n\");\r\n    return SMC_Result_OK;\r\n  }\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Service Request 0x%x\\n\", RequestId);\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n    \"Service Request Argument 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\\n\",\r\n    RequestArgument[0],\r\n    RequestArgument[1],\r\n    RequestArgument[2],\r\n    RequestArgument[3],\r\n    RequestArgument[4],\r\n    RequestArgument[5]\r\n    );\r\n\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n\r\n  // 1 Clear Response\r\n  SmuMessageResponse = 0;\r\n  if (AccessFlags) {\r\n    xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10578, SmuMessageResponse);\r\n\r\n    // 2 Write message arguments\r\n    xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10998, RequestArgument[0]);\r\n    xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B1099C, RequestArgument[1]);\r\n    xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A0, RequestArgument[2]);\r\n    xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A4, RequestArgument[3]);\r\n    xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A8, RequestArgument[4]);\r\n    xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109AC, RequestArgument[5]);\r\n\r\n    // 3 Write message ID\r\n    xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10528, (uint32_t)RequestId);\r\n  } else {\r\n    // 4 Poll Response until non-zero\r\n    do {\r\n      xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n        \"Poll SMU Message Response until non-zero!! Current SMU Message Response 0x%x\\n\",\r\n        SmuMessageResponse\r\n        );\r\n    } while (SmuMessageResponse == 0x0);\r\n    SMU_TRACEPOINT(SIL_TRACE_INFO, \"After SMU Message Responded!!\\n\");\r\n\r\n    if ((SMC_RESULT)SmuMessageResponse == SMC_Result_Fatal) {\r\n      assert((SMC_RESULT)SmuMessageResponse != SMC_Result_Fatal);\r\n      return SMC_Result_Fatal;\r\n    }\r\n\r\n    // 5 Read updated SMU message arguments\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10998, &RequestArgument[0]);\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B1099C, &RequestArgument[1]);\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A0, &RequestArgument[2]);\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A4, &RequestArgument[3]);\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A8, &RequestArgument[4]);\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109AC, &RequestArgument[5]);\r\n  }\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return (SMC_RESULT)SmuMessageResponse;\r\n}",
            "range": [
                {
                    "line": 220,
                    "character": 0
                },
                {
                    "line": 292,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 221,
                    "character": 0
                },
                {
                    "line": 221,
                    "character": 24
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SMC_RESULT",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                        "documentation": "/// SMU Response Codes",
                        "definition": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                        "implementation": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                        "range": [
                            {
                                "line": 13,
                                "character": 0
                            },
                            {
                                "line": 20,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 20,
                                "character": 2
                            },
                            {
                                "line": 20,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "PCI_ADDR",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/Pci.h",
                        "documentation": "/// Union type for PCI address",
                        "definition": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                        "implementation": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                        "range": [
                            {
                                "line": 43,
                                "character": 0
                            },
                            {
                                "line": 46,
                                "character": 11
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 46,
                                "character": 2
                            },
                            {
                                "line": 46,
                                "character": 10
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMU_TRACEPOINT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                        "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                        "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "range": [
                            {
                                "line": 19,
                                "character": 0
                            },
                            {
                                "line": 24,
                                "character": 19
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 19,
                                "character": 8
                            },
                            {
                                "line": 19,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_ENTRY",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                        "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                        "range": [
                            {
                                "line": 102,
                                "character": 0
                            },
                            {
                                "line": 102,
                                "character": 70
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 102,
                                "character": 8
                            },
                            {
                                "line": 102,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMC_Message_Count_PHX",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.h",
                        "documentation": "/// BIOS to SMU Message Definitions for Phoenix",
                        "definition": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                        "implementation": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                        "range": [
                            {
                                "line": 14,
                                "character": 0
                            },
                            {
                                "line": 14,
                                "character": 95
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 14,
                                "character": 8
                            },
                            {
                                "line": 14,
                                "character": 29
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_ERROR",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                        "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                        "range": [
                            {
                                "line": 100,
                                "character": 0
                            },
                            {
                                "line": 100,
                                "character": 87
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 100,
                                "character": 8
                            },
                            {
                                "line": 100,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_INFO",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "range": [
                            {
                                "line": 104,
                                "character": 0
                            },
                            {
                                "line": 104,
                                "character": 118
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 104,
                                "character": 8
                            },
                            {
                                "line": 104,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B10578",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B10578   0x3B10578UL",
                        "implementation": "#define MP1MMIOx3B10578   0x3B10578UL",
                        "range": [
                            {
                                "line": 22,
                                "character": 0
                            },
                            {
                                "line": 22,
                                "character": 37
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 22,
                                "character": 8
                            },
                            {
                                "line": 22,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B10998",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B10998 0x3B10998ul",
                        "implementation": "#define MP1MMIOx3B10998 0x3B10998ul",
                        "range": [
                            {
                                "line": 15,
                                "character": 0
                            },
                            {
                                "line": 15,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 15,
                                "character": 8
                            },
                            {
                                "line": 15,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B1099C",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                        "implementation": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                        "range": [
                            {
                                "line": 16,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 16,
                                "character": 8
                            },
                            {
                                "line": 16,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109A0",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                        "implementation": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                        "range": [
                            {
                                "line": 17,
                                "character": 0
                            },
                            {
                                "line": 17,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 17,
                                "character": 8
                            },
                            {
                                "line": 17,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109A4",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                        "implementation": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                        "range": [
                            {
                                "line": 18,
                                "character": 0
                            },
                            {
                                "line": 18,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 18,
                                "character": 8
                            },
                            {
                                "line": 18,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109A8",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                        "implementation": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                        "range": [
                            {
                                "line": 19,
                                "character": 0
                            },
                            {
                                "line": 19,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 19,
                                "character": 8
                            },
                            {
                                "line": 19,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109AC",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109AC 0x3B109ACul",
                        "implementation": "#define MP1MMIOx3B109AC 0x3B109ACul",
                        "range": [
                            {
                                "line": 20,
                                "character": 0
                            },
                            {
                                "line": 20,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 20,
                                "character": 8
                            },
                            {
                                "line": 20,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B10528",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B10528    0x3B10528ul",
                        "implementation": "#define MP1MMIOx3B10528    0x3B10528ul",
                        "range": [
                            {
                                "line": 21,
                                "character": 0
                            },
                            {
                                "line": 21,
                                "character": 38
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 21,
                                "character": 8
                            },
                            {
                                "line": 21,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_EXIT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                        "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                        "range": [
                            {
                                "line": 103,
                                "character": 0
                            },
                            {
                                "line": 103,
                                "character": 69
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 103,
                                "character": 8
                            },
                            {
                                "line": 103,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "xUSLIndirectPciRead32",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                        "documentation": "/**\n * @brief Indirect Pci Read Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         pointer to hold read value.\n *\n */",
                        "definition": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)",
                        "implementation": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  *Value = xUSLPciRead32(PciBase + sizeof (uint32_t));\r\n}",
                        "range": [
                            {
                                "line": 162,
                                "character": 0
                            },
                            {
                                "line": 167,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 162,
                                "character": 5
                            },
                            {
                                "line": 162,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMNx00B8",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                    "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                    "definition": "#define SMNx00B8  0x00B8",
                                    "implementation": "#define SMNx00B8  0x00B8",
                                    "range": [
                                        {
                                            "line": 11,
                                            "character": 0
                                        },
                                        {
                                            "line": 11,
                                            "character": 24
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 11,
                                            "character": 8
                                        },
                                        {
                                            "line": 11,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "xUSLPciWrite32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                    "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                    "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                    "range": [
                                        {
                                            "line": 80,
                                            "character": 0
                                        },
                                        {
                                            "line": 83,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 80,
                                            "character": 5
                                        },
                                        {
                                            "line": 80,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "xUSLPciExpressWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                "documentation": "",
                                                "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                "range": [
                                                    {
                                                        "line": 43,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 46,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 43,
                                                        "character": 19
                                                    },
                                                    {
                                                        "line": 43,
                                                        "character": 40
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                            "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "range": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 32
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "xUSLPciRead32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Read 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n *\n */",
                                    "definition": "uint32_t xUSLPciRead32 (uint32_t Address)",
                                    "implementation": "uint32_t xUSLPciRead32 (uint32_t Address)\r\n{\r\n  return xUSLPciExpressRead32((void *)(size_t)Address);\r\n}",
                                    "range": [
                                        {
                                            "line": 68,
                                            "character": 0
                                        },
                                        {
                                            "line": 71,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 68,
                                            "character": 9
                                        },
                                        {
                                            "line": 68,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "xUSLPciExpressRead32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                "documentation": "",
                                                "definition": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)",
                                                "implementation": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)\r\n{\r\n  return *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS));\r\n}",
                                                "range": [
                                                    {
                                                        "line": 23,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 26,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 23,
                                                        "character": 23
                                                    },
                                                    {
                                                        "line": 23,
                                                        "character": 43
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                            "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "range": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 32
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "xUSLIndirectPciWrite32",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                        "documentation": "/**\n * @brief Indirect Pci Write Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         The value to be written.\n *\n */",
                        "definition": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)",
                        "implementation": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  xUSLPciWrite32(PciBase + sizeof (uint32_t), Value);\r\n}",
                        "range": [
                            {
                                "line": 176,
                                "character": 0
                            },
                            {
                                "line": 181,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 176,
                                "character": 5
                            },
                            {
                                "line": 176,
                                "character": 27
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMNx00B8",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                    "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                    "definition": "#define SMNx00B8  0x00B8",
                                    "implementation": "#define SMNx00B8  0x00B8",
                                    "range": [
                                        {
                                            "line": 11,
                                            "character": 0
                                        },
                                        {
                                            "line": 11,
                                            "character": 24
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 11,
                                            "character": 8
                                        },
                                        {
                                            "line": 11,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "xUSLPciWrite32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                    "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                    "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                    "range": [
                                        {
                                            "line": 80,
                                            "character": 0
                                        },
                                        {
                                            "line": 83,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 80,
                                            "character": 5
                                        },
                                        {
                                            "line": 80,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "xUSLPciExpressWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                "documentation": "",
                                                "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                "range": [
                                                    {
                                                        "line": 43,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 46,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 43,
                                                        "character": 19
                                                    },
                                                    {
                                                        "line": 43,
                                                        "character": 40
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                            "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "range": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 32
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "SmuNotifyS3EntryPhx",
            "kind": 11,
            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
            "documentation": "/**\n * SmuNotifyS3EntryPhx\n *\n * @brief SMU S3 Entry Notification\n *\n */",
            "definition": "void\r\nSmuNotifyS3EntryPhx (void)",
            "implementation": "void\r\nSmuNotifyS3EntryPhx (void)\r\n{\r\n  PCI_ADDR PciAddress;\r\n  uint32_t RequestId;\r\n  uint32_t RxSmuMessageResponse;\r\n  PciAddress.AddressValue = MAKE_SBDFO(0, 0, 0, 0, 0);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &RxSmuMessageResponse);\r\n\r\n  // 1 Clear Response\r\n  RxSmuMessageResponse = 0;\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10578, RxSmuMessageResponse);\r\n\r\n  // 2 Clear Message Arguments\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10998, RxSmuMessageResponse);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B1099C, RxSmuMessageResponse);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A0, RxSmuMessageResponse);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A4, RxSmuMessageResponse);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A8, RxSmuMessageResponse);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109AC, RxSmuMessageResponse);\r\n\r\n  // 3 Write message ID\r\n  RequestId = SMC_MSG_SleepEntry;\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10528, RequestId);\r\n\r\n  // Halt execution\r\n  xUslCpuSleep ();\r\n}",
            "range": [
                {
                    "line": 301,
                    "character": 0
                },
                {
                    "line": 328,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 302,
                    "character": 0
                },
                {
                    "line": 302,
                    "character": 19
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "PCI_ADDR",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/Pci.h",
                        "documentation": "/// Union type for PCI address",
                        "definition": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                        "implementation": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                        "range": [
                            {
                                "line": 43,
                                "character": 0
                            },
                            {
                                "line": 46,
                                "character": 11
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 46,
                                "character": 2
                            },
                            {
                                "line": 46,
                                "character": 10
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MAKE_SBDFO",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/Pci.h",
                        "documentation": "/**\n * @file  Pci.h\n * @brief OpenSIL PCI access functions prototype\n *\n */\n/* Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                        "definition": "#define MAKE_SBDFO(Seg, Bus, Dev, Fun, Off) ((((uint32_t) (Seg)) << 28) | (((uint32_t) (Bus)) << 20) | \\\r\n        (((uint32_t)(Dev)) << 15) | (((uint32_t)(Fun)) << 12) | ((uint32_t)(Off)))",
                        "implementation": "#define MAKE_SBDFO(Seg, Bus, Dev, Fun, Off) ((((uint32_t) (Seg)) << 28) | (((uint32_t) (Bus)) << 20) | \\\r\n        (((uint32_t)(Dev)) << 15) | (((uint32_t)(Fun)) << 12) | ((uint32_t)(Off)))",
                        "range": [
                            {
                                "line": 16,
                                "character": 0
                            },
                            {
                                "line": 17,
                                "character": 82
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 16,
                                "character": 8
                            },
                            {
                                "line": 16,
                                "character": 18
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B10578",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B10578   0x3B10578UL",
                        "implementation": "#define MP1MMIOx3B10578   0x3B10578UL",
                        "range": [
                            {
                                "line": 22,
                                "character": 0
                            },
                            {
                                "line": 22,
                                "character": 37
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 22,
                                "character": 8
                            },
                            {
                                "line": 22,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B10998",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B10998 0x3B10998ul",
                        "implementation": "#define MP1MMIOx3B10998 0x3B10998ul",
                        "range": [
                            {
                                "line": 15,
                                "character": 0
                            },
                            {
                                "line": 15,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 15,
                                "character": 8
                            },
                            {
                                "line": 15,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B1099C",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                        "implementation": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                        "range": [
                            {
                                "line": 16,
                                "character": 0
                            },
                            {
                                "line": 16,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 16,
                                "character": 8
                            },
                            {
                                "line": 16,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109A0",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                        "implementation": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                        "range": [
                            {
                                "line": 17,
                                "character": 0
                            },
                            {
                                "line": 17,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 17,
                                "character": 8
                            },
                            {
                                "line": 17,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109A4",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                        "implementation": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                        "range": [
                            {
                                "line": 18,
                                "character": 0
                            },
                            {
                                "line": 18,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 18,
                                "character": 8
                            },
                            {
                                "line": 18,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109A8",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                        "implementation": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                        "range": [
                            {
                                "line": 19,
                                "character": 0
                            },
                            {
                                "line": 19,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 19,
                                "character": 8
                            },
                            {
                                "line": 19,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B109AC",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B109AC 0x3B109ACul",
                        "implementation": "#define MP1MMIOx3B109AC 0x3B109ACul",
                        "range": [
                            {
                                "line": 20,
                                "character": 0
                            },
                            {
                                "line": 20,
                                "character": 35
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 20,
                                "character": 8
                            },
                            {
                                "line": 20,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMC_MSG_SleepEntry",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                        "documentation": "/// Common BIOS to SMU Message Definitions",
                        "definition": "#define SMC_MSG_SleepEntry                0xB",
                        "implementation": "#define SMC_MSG_SleepEntry                0xB",
                        "range": [
                            {
                                "line": 107,
                                "character": 0
                            },
                            {
                                "line": 107,
                                "character": 45
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 107,
                                "character": 8
                            },
                            {
                                "line": 107,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MP1MMIOx3B10528",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                        "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                        "definition": "#define MP1MMIOx3B10528    0x3B10528ul",
                        "implementation": "#define MP1MMIOx3B10528    0x3B10528ul",
                        "range": [
                            {
                                "line": 21,
                                "character": 0
                            },
                            {
                                "line": 21,
                                "character": 38
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 21,
                                "character": 8
                            },
                            {
                                "line": 21,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "xUSLIndirectPciRead32",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                        "documentation": "/**\n * @brief Indirect Pci Read Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         pointer to hold read value.\n *\n */",
                        "definition": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)",
                        "implementation": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  *Value = xUSLPciRead32(PciBase + sizeof (uint32_t));\r\n}",
                        "range": [
                            {
                                "line": 162,
                                "character": 0
                            },
                            {
                                "line": 167,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 162,
                                "character": 5
                            },
                            {
                                "line": 162,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMNx00B8",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                    "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                    "definition": "#define SMNx00B8  0x00B8",
                                    "implementation": "#define SMNx00B8  0x00B8",
                                    "range": [
                                        {
                                            "line": 11,
                                            "character": 0
                                        },
                                        {
                                            "line": 11,
                                            "character": 24
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 11,
                                            "character": 8
                                        },
                                        {
                                            "line": 11,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "xUSLPciWrite32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                    "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                    "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                    "range": [
                                        {
                                            "line": 80,
                                            "character": 0
                                        },
                                        {
                                            "line": 83,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 80,
                                            "character": 5
                                        },
                                        {
                                            "line": 80,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "xUSLPciExpressWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                "documentation": "",
                                                "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                "range": [
                                                    {
                                                        "line": 43,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 46,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 43,
                                                        "character": 19
                                                    },
                                                    {
                                                        "line": 43,
                                                        "character": 40
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                            "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "range": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 32
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "xUSLPciRead32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Read 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n *\n */",
                                    "definition": "uint32_t xUSLPciRead32 (uint32_t Address)",
                                    "implementation": "uint32_t xUSLPciRead32 (uint32_t Address)\r\n{\r\n  return xUSLPciExpressRead32((void *)(size_t)Address);\r\n}",
                                    "range": [
                                        {
                                            "line": 68,
                                            "character": 0
                                        },
                                        {
                                            "line": 71,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 68,
                                            "character": 9
                                        },
                                        {
                                            "line": 68,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "xUSLPciExpressRead32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                "documentation": "",
                                                "definition": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)",
                                                "implementation": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)\r\n{\r\n  return *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS));\r\n}",
                                                "range": [
                                                    {
                                                        "line": 23,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 26,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 23,
                                                        "character": 23
                                                    },
                                                    {
                                                        "line": 23,
                                                        "character": 43
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                            "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "range": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 32
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "xUSLIndirectPciWrite32",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                        "documentation": "/**\n * @brief Indirect Pci Write Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         The value to be written.\n *\n */",
                        "definition": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)",
                        "implementation": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  xUSLPciWrite32(PciBase + sizeof (uint32_t), Value);\r\n}",
                        "range": [
                            {
                                "line": 176,
                                "character": 0
                            },
                            {
                                "line": 181,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 176,
                                "character": 5
                            },
                            {
                                "line": 176,
                                "character": 27
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMNx00B8",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                    "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                    "definition": "#define SMNx00B8  0x00B8",
                                    "implementation": "#define SMNx00B8  0x00B8",
                                    "range": [
                                        {
                                            "line": 11,
                                            "character": 0
                                        },
                                        {
                                            "line": 11,
                                            "character": 24
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 11,
                                            "character": 8
                                        },
                                        {
                                            "line": 11,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "xUSLPciWrite32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                    "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                    "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                    "range": [
                                        {
                                            "line": 80,
                                            "character": 0
                                        },
                                        {
                                            "line": 83,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 80,
                                            "character": 5
                                        },
                                        {
                                            "line": 80,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "xUSLPciExpressWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                "documentation": "",
                                                "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                "range": [
                                                    {
                                                        "line": 43,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 46,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 43,
                                                        "character": 19
                                                    },
                                                    {
                                                        "line": 43,
                                                        "character": 40
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                            "kind": 13,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                            "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                            "range": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 11,
                                                                    "character": 8
                                                                },
                                                                {
                                                                    "line": 11,
                                                                    "character": 32
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": []
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "xUslCpuSleep",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/CpuLib.h",
                        "documentation": "/**\n * Memory-Typing MSRs\n * Defined in AMD64 Architecture Programmer's Manual Volume 2: System Programming\n * Table A-3\n * Classification (Black)\n */\n#define AMD_MTRR_VARIABLE_BASE0                 0x200\n#define AMD_MTRR_VARIABLE_MASK0                 0x201\n#define AMD_MTRR_VARIABLE_BASE1                 0x202\n#define AMD_MTRR_VARIABLE_MASK1                 0x203\n#define AMD_MTRR_VARIABLE_BASE2                 0x204\n#define AMD_MTRR_VARIABLE_MASK2                 0x205\n#define AMD_MTRR_VARIABLE_BASE3                 0x206\n#define AMD_MTRR_VARIABLE_MASK3                 0x207\n#define AMD_MTRR_VARIABLE_BASE4                 0x208\n#define AMD_MTRR_VARIABLE_MASK4                 0x209\n#define AMD_MTRR_VARIABLE_BASE5                 0x20A\n#define AMD_MTRR_VARIABLE_MASK5                 0x20B\n#define AMD_MTRR_VARIABLE_BASE6                 0x20C\n#define AMD_MTRR_VARIABLE_MASK6                 0x20D\n#define AMD_MTRR_VARIABLE_BASE7                 0x20E\n#define AMD_MTRR_VARIABLE_MASK7                 0x20F\n#define AMD_AP_MTRR_FIX64K_00000                0x250\n#define AMD_AP_MTRR_FIX16K_80000                0x258\n#define AMD_AP_MTRR_FIX16K_A0000                0x259\n#define AMD_AP_MTRR_FIX4K_C0000                 0x268\n#define AMD_AP_MTRR_FIX4K_C8000                 0x269\n#define AMD_AP_MTRR_FIX4K_D0000                 0x26A\n#define AMD_AP_MTRR_FIX4K_D8000                 0x26B\n#define AMD_AP_MTRR_FIX4K_E0000                 0x26C\n#define AMD_AP_MTRR_FIX4K_E8000                 0x26D\n#define AMD_AP_MTRR_FIX4K_F0000                 0x26E\n#define AMD_AP_MTRR_FIX4K_F8000                 0x26F\n\n#define AMD_MTRR_FIX64K_WB_DRAM                 0x1E1E1E1E1E1E1E1Eull\n#define AMD_MTRR_FIX16K_WB_DRAM                 0x1E1E1E1E1E1E1E1Eull\n\n// Misc. defines.\n\n#define CPUID_STEPPING_MASK                    0x0000000Ful\n#define CPUID_BASE_MODEL_MASK                  0x000000F0ul\n#define CPUID_BASE_FAMILY_MASK                 0x00000F00ul\n#define CPUID_EXT_MODEL_MASK                   0x000F0000ul\n#define CPUID_EXT_FAMILY_MASK                  0x0FF00000ul\n#define CPUID_BASE_MODEL_OFFSET                4\n#define CPUID_BASE_FAMILY_OFFSET               8\n#define CPUID_EXT_MODEL_OFFSET                 16\n#define CPUID_EXT_FAMILY_OFFSET                20\n\n/*\n * Prototypes for CpuOps.c\n */\nuint8_t\nxUslGetThreadsPerCore (void);\n\nuint32_t\nxUslGetRawIdOnExecutingCore (void);\n\nuint32_t\nxUslGetPackageType (void);\n\nbool\nxUslIsSmtDisabled (void);\n\nuint16_t\nxUslGetProcessorId (void);\n\nuint32_t\nxUslGetInitialApicId (void);\n\nuint8_t\nxUslGetPhysAddrSize (void);\n\nuint8_t\nxUslGetPhysAddrReduction (void);\n\nuint32_t\nxUslGetSecureEncryption (void);\n\nuint8_t\nxUslGetCpuidCoreMaskWidth (void);\n\nvoid\nxUslMsrOr (\n  uint32_t Index,\n  uint64_t OrData\n  );\n\nvoid\nxUslGetCpuidExtCpuTopology (\n  CPUID_DATA  *Regs,\n  uint8_t     SubIndex\n  );\n\nvoid\nxUslMsrAnd (\n  uint32_t Index,\n  uint64_t AndData\n  );\n\nvoid\nxUslMsrAndThenOr (\n  uint32_t Index,\n  uint64_t AndData,\n  uint64_t OrData\n  );\n\nuint8_t\nxUslSetMtrr (\n  uint64_t BaseAddress,\n  uint64_t Length,\n  MTRR_MEMORY_CACHE_TYPE MtrrType\n  );\n\nvoid\nxUslClearMtrr (\n  uint8_t MtrrIndex\n  );\n\n/*\n * Prototypes for CpuOpsXX.nasm\n */\nNASM_ABI void\nxUslCpuId (\n  uint32_t EaxIn,\n  uint32_t ExtId,\n  CPUID_DATA *CpuRegs\n  );\n\nNASM_ABI uint64_t\nxUslRdMsr (\n  uint32_t MsrAddress\n  );\n\nNASM_ABI void\nxUslWrMsr (\n  uint32_t MsrAddress,\n  uint64_t MsrValue\n  );\n\nNASM_ABI void\nxUslWbinvd (void);\n\nNASM_ABI void\nxUslWriteCr0 (uintptr_t  Cr0);\n\nNASM_ABI void\nxUslWriteCr3 (uintptr_t  Cr3);\n\nNASM_ABI uintptr_t\nxUslReadCr0 (void);\n\nNASM_ABI uintptr_t\nxUslReadCr3 (void);\n\nNASM_ABI uint32_t\nxUslCountTrailingZeroes (\n  uint32_t Val\n  );\n\n/*\n * Prototypes for CpuLibXX.nasm\n */",
                        "definition": "NASM_ABI void\r\nxUslCpuSleep (void);",
                        "implementation": "NASM_ABI void\r\nxUslCpuSleep (void);",
                        "range": [
                            {
                                "line": 237,
                                "character": 0
                            },
                            {
                                "line": 238,
                                "character": 20
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 238,
                                "character": 0
                            },
                            {
                                "line": 238,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "NASM_ABI",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "",
                                    "definition": "#define NASM_ABI",
                                    "implementation": "#define NASM_ABI",
                                    "range": [
                                        {
                                            "line": 240,
                                            "character": 0
                                        },
                                        {
                                            "line": 240,
                                            "character": 17
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 240,
                                            "character": 8
                                        },
                                        {
                                            "line": 240,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "SmuReadBistInfoPhx",
            "kind": 11,
            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
            "documentation": "/**\n * SmuReadBistInfoPhx\n *\n * @brief Retrieve BIST info from SMU for Phoenix\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   InstanceId  The unique identifier of the SMU instance associated\n *                      with this socket (for PHX, the socket number)\n * @param   PhysicalCcx Number of the physical CCX\n * @param   BistInfo    Pointer to uint32_t where BIST info should be copied.\n *                      Caller should allocate the memory for BistData.\n *\n * @note    This service require the GnbHandle which is created during NBIO Timepoint 1 execution.\n *\n * @return  SIL_STATUS  SilNotFound         If unable to make SMU call\n *                      SilNotFound         IP transfer table not found\n *                      SilInvalidParameter If null pointer passed in\n *                      SilPass             If call succeeded and return argument is populated. Returns\n *                      SilUnsupported      SMU does not support this call\n *\n **/",
            "definition": "SIL_STATUS\r\nSmuReadBistInfoPhx (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint8_t        InstanceId,\r\n  uint8_t        PhysicalCcx,\r\n  uint32_t       *BistInfo\r\n  )",
            "implementation": "SIL_STATUS\r\nSmuReadBistInfoPhx (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint8_t        InstanceId,\r\n  uint8_t        PhysicalCcx,\r\n  uint32_t       *BistInfo\r\n  )\r\n{\r\n  uint32_t                    SmuArg[6];\r\n  SIL_STATUS                  Status;\r\n  SMC_RESULT                  SmcStatus;\r\n  GNB_HANDLE                  *GnbHandle;\r\n  APOB_IP2IP_API              *ApobIp2IpApi;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  Status = SilGetIp2IpApi(SilContext, SilId_ApobClass, (void **) &ApobIp2IpApi);\r\n  if ((Status != SilPass) || (ApobIp2IpApi == NULL)) {\r\n    assert(Status == SilPass);\r\n    return Status;\r\n  }\r\n\r\n  if (BistInfo == NULL) {\r\n    return SilInvalidParameter;\r\n  }\r\n\r\n  Status = SmuGetGnbHandleCommon(SilContext, InstanceId, &GnbHandle);\r\n\r\n  if (Status == SilPass) {\r\n    SmuServiceInitArgumentsCommon(SmuArg);\r\n    SmuArg[0] = PhysicalCcx;\r\n    SmcStatus = SmuServiceRequestPhx(GnbHandle->Address,\r\n      SMC_MSG_GetCoreBistPF_PHX,\r\n      SmuArg,\r\n      0\r\n      );\r\n    if (SmcStatus == SMC_Result_OK) {\r\n      *BistInfo = SmuArg[0];\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"BIST INFO = 0x%x.\\n\", *BistInfo);\r\n      Status = SilPass;\r\n    } else {\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"BIST call to SMU failed.\\n\");\r\n      Status = SilUnsupported;\r\n    }\r\n  } else {\r\n    SMU_TRACEPOINT(SIL_TRACE_INFO, \"Unable to make BIST call to SMU. Status: 0x%x\\n\", Status);\r\n    Status = SilNotFound;\r\n  }\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return Status;\r\n}",
            "range": [
                {
                    "line": 353,
                    "character": 0
                },
                {
                    "line": 404,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 354,
                    "character": 0
                },
                {
                    "line": 354,
                    "character": 18
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMC_RESULT",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                        "documentation": "/// SMU Response Codes",
                        "definition": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                        "implementation": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                        "range": [
                            {
                                "line": 13,
                                "character": 0
                            },
                            {
                                "line": 20,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 20,
                                "character": 2
                            },
                            {
                                "line": 20,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "GNB_HANDLE",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/GnbDxio.h",
                        "documentation": "",
                        "definition": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                        "implementation": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                        "range": [
                            {
                                "line": 555,
                                "character": 0
                            },
                            {
                                "line": 555,
                                "character": 39
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 555,
                                "character": 28
                            },
                            {
                                "line": 555,
                                "character": 38
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "APOB_IP2IP_API",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/APOB/ApobIp2Ip.h",
                        "documentation": "",
                        "definition": "typedef struct {\r\n  APOB_IP2IP_API_HEADER          Header;\r\n  APOB_GET_PHYS_CCD_NUMBER       ApobGetPhysCcdNumber;\r\n  APOB_GET_PHYS_COMPLEX_NUMBER   ApobGetPhysComplexNumber;\r\n  APOB_GET_PHYS_CORE_NUMBER      ApobGetPhysCoreNumber;\r\n  APOB_GET_THREAD_ENABLE         ApobGetIsThreadEnabled;\r\n  APOB_GET_SUBPROGRAM            ApobGetSubProgram;\r\n  APOB_GET_DIMM_SPD_DATA         ApobGetDimmSpdData;\r\n  APOB_GET_CCDLOG_PHYMAP         ApobGetCcdLogToPhysMap;\r\n  APOB_GET_ACTIONON_BISTFAILURE  ApobGetActionOnBistFailure;\r\n  APOB_GET_MAXCPUS               ApobGetMaxCpus;\r\n  APOB_GET_SOC_MAX_DIE_INFO      ApobGetMaxDieInfo;\r\n  APOB_GET_ENTRY_INSTANCE        ApobAmdGetApobEntryInstance;\r\n  APOB_GET_APCB_UPDATE           ApobGetApcbUpdate;\r\n} APOB_IP2IP_API;",
                        "implementation": "typedef struct {\r\n  APOB_IP2IP_API_HEADER          Header;\r\n  APOB_GET_PHYS_CCD_NUMBER       ApobGetPhysCcdNumber;\r\n  APOB_GET_PHYS_COMPLEX_NUMBER   ApobGetPhysComplexNumber;\r\n  APOB_GET_PHYS_CORE_NUMBER      ApobGetPhysCoreNumber;\r\n  APOB_GET_THREAD_ENABLE         ApobGetIsThreadEnabled;\r\n  APOB_GET_SUBPROGRAM            ApobGetSubProgram;\r\n  APOB_GET_DIMM_SPD_DATA         ApobGetDimmSpdData;\r\n  APOB_GET_CCDLOG_PHYMAP         ApobGetCcdLogToPhysMap;\r\n  APOB_GET_ACTIONON_BISTFAILURE  ApobGetActionOnBistFailure;\r\n  APOB_GET_MAXCPUS               ApobGetMaxCpus;\r\n  APOB_GET_SOC_MAX_DIE_INFO      ApobGetMaxDieInfo;\r\n  APOB_GET_ENTRY_INSTANCE        ApobAmdGetApobEntryInstance;\r\n  APOB_GET_APCB_UPDATE           ApobGetApcbUpdate;\r\n} APOB_IP2IP_API;",
                        "range": [
                            {
                                "line": 105,
                                "character": 0
                            },
                            {
                                "line": 119,
                                "character": 17
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 119,
                                "character": 2
                            },
                            {
                                "line": 119,
                                "character": 16
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMU_TRACEPOINT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                        "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                        "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "range": [
                            {
                                "line": 19,
                                "character": 0
                            },
                            {
                                "line": 24,
                                "character": 19
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 19,
                                "character": 8
                            },
                            {
                                "line": 19,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_ENTRY",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                        "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                        "range": [
                            {
                                "line": 102,
                                "character": 0
                            },
                            {
                                "line": 102,
                                "character": 70
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 102,
                                "character": 8
                            },
                            {
                                "line": 102,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMC_MSG_GetCoreBistPF_PHX",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.h",
                        "documentation": "/// BIOS to SMU Message Definitions for Phoenix",
                        "definition": "#define SMC_MSG_GetCoreBistPF_PHX                       0x3F ///< To get CCX memory build in test result",
                        "implementation": "#define SMC_MSG_GetCoreBistPF_PHX                       0x3F ///< To get CCX memory build in test result",
                        "range": [
                            {
                                "line": 13,
                                "character": 0
                            },
                            {
                                "line": 13,
                                "character": 104
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 13,
                                "character": 8
                            },
                            {
                                "line": 13,
                                "character": 33
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_INFO",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "range": [
                            {
                                "line": 104,
                                "character": 0
                            },
                            {
                                "line": 104,
                                "character": 118
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 104,
                                "character": 8
                            },
                            {
                                "line": 104,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_EXIT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                        "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                        "range": [
                            {
                                "line": 103,
                                "character": 0
                            },
                            {
                                "line": 103,
                                "character": 69
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 103,
                                "character": 8
                            },
                            {
                                "line": 103,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SilGetIp2IpApi",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                        "documentation": "/**\n * SilGetIp2IpApi\n *\n * @details This function is used by openSIL IPs to find and return a pointer to the Ip-2-Ip API installed for the\n *          specified IP ID.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP block to request the Ip-2-Ip API for.  The list of\n *                       valid Ids is defined in xSIM-api.h.\n * @param   Api          Upon success, this output is a pointer to the Ip-2-Ip API.\n *\n * @returns SIL_STATUS\n * @retval  SilPass     The Api was found and returned in the Api pointer\n * @retval  SilNotFound No API was installed for IP\n *\n */",
                        "definition": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )",
                        "implementation": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )\r\n{\r\n  SIL_STATUS          Status;\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  // Comment this TRACEPOINT to reduce debug output\r\n  //XUSL_TRACEPOINT (SIL_TRACE_INFO, \"Get Ip-2-Ip API for IP ID %d\\n\", IpId);\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n\r\n  Status = SilPass;\r\n\r\n  *Api = (void *)((uintptr_t)SilVars->Ip2IpApi[IpId]);\r\n  if (*Api == NULL) {\r\n    Status = SilNotFound;\r\n    XUSL_TRACEPOINT(SIL_TRACE_ERROR, \"Ip-2-Ip API for IP ID %d NOT FOUND!\\n\", IpId);\r\n    assert(*Api != NULL);// Assert if the requested API is null\r\n  }\r\n\r\n  return Status;\r\n}",
                        "range": [
                            {
                                "line": 190,
                                "character": 0
                            },
                            {
                                "line": 219,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 191,
                                "character": 0
                            },
                            {
                                "line": 191,
                                "character": 14
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_DATA_BLOCK_ID",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                    "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                    "range": [
                                        {
                                            "line": 48,
                                            "character": 0
                                        },
                                        {
                                            "line": 73,
                                            "character": 20
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 73,
                                            "character": 2
                                        },
                                        {
                                            "line": 73,
                                            "character": 19
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_BLOCK_VARIABLES",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                    "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                    "range": [
                                        {
                                            "line": 182,
                                            "character": 0
                                        },
                                        {
                                            "line": 193,
                                            "character": 22
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 193,
                                            "character": 2
                                        },
                                        {
                                            "line": 193,
                                            "character": 21
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SilVars",
                                    "kind": 12,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/UnitTest/Source/xSIM/xSimAssignMemoryTp1Ut/xSimAssignMemoryTp1Ut.c",
                                    "documentation": "/**\n * @file xSimAssignMemoryTp1Ut.c\n * @brief    This UT will test xSimAssignMemoryTp1.\n * @details: It will also test static functions:\n *\n * Unit test implementation: xSimClearIpApis, xSimInitializeIpApis, GetActiveSocIpListTp1\n *\n * xSimAssignMemoryTp1Ut Iteration definitions\n *\n * ClearIpApis:     This iteration is will test the clearing of API buffers\n *                  (I2I/C2R). The buffer defaults are 0xffffffffffffffff for\n *                  index 0, 8, 16. A passing case will result in those indices\n *                  being set to 0.\n * BadSocIpListTp1: This iteration is will test xSimAssignMemoryTp1 when\n *                  GetActiveSocIpListTp1 returns error\n * BadInitIpApis:   This iteration will test execution path of xSimInitializeIpApis\n *                  when LclIpRecord->ApiInit is non-NULL and returns a bad status.\n *                  It will also cover xSimAssignMemoryTp1 branch when\n *                  xSimInitializeIpApis returns a bad status.\n * OutOfResources:  This iteration will test the case when xSimAssignMemoryTp1 returns\n *                  OutOfResources.\n * SetInputBadStatus: This iteration will test the case when LclIpRecord->SetInput\n *                    in xSimAssignMemoryTp1 returns a bad status.\n * AssignMemoryTp1: This iteration will test the default (all good) execution path of xSimAssignMemoryTp1.\n *\n */\n\n#include <UtBaseLib.h>\n#include <xSIM.h>\n#include <UtLogLib.h>\n#include <stdlib.h>\n#include <time.h>\n#include <SilSocLogicalId.h>\n#include <Library/UtSocLogicalIdMockLib.h>\n#include \"xSimAssignMemoryTp1Ut.h\"\n\n// Variables used for ClearIpApis iteration\n\n/*\n * This structure is used to test the clearing of API buffers in xSimClearIpApis\n * in iteration \"ClearIpApis\"\n */",
                                    "definition": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                    "implementation": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                    "range": [
                                        {
                                            "line": 44,
                                            "character": 0
                                        },
                                        {
                                            "line": 51,
                                            "character": 2
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 44,
                                            "character": 20
                                        },
                                        {
                                            "line": 44,
                                            "character": 27
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SilVars",
                                    "kind": 12,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/UnitTest/Source/xSIM/xSimAssignMemoryTp2Ut/xSimAssignMemoryTp2Ut.c",
                                    "documentation": "/**\n * @file xSimAssignMemoryTp2Ut.c\n * @brief    This UT will test xSimAssignMemoryTp2.\n * @details: It will also test static functions:\n *\n * Unit test implementation: xSimClearIpApis, xSimInitializeIpApis, GetActiveSocIpListTp2\n *\n * xSimAssignMemoryTp2Ut Iteration definitions\n *\n * ClearIpApis:     This iteration is will test the clearing of API buffers\n *                  (I2I/C2R). The buffer defaults are 0xffffffffffffffff for\n *                  index 0, 8, 16. A passing case will result in those indices\n *                  being set to 0.\n * BadSocIpListTp2: This iteration is will test xSimAssignMemoryTp2 when\n *                  GetActiveSocIpListTp2 returns error\n * BadInitIpApis:   This iteration will test execution path of xSimInitializeIpApis\n *                  when LclIpRecord->ApiInit is non-NULL and returns a bad status.\n *                  It will also cover xSimAssignMemoryTp2 branch when\n *                  xSimInitializeIpApis returns a bad status.\n * AssignMemoryTp2: This iteration will test the default (all good) execution path of xSimAssignMemoryTp2.\n *\n */\n\n#include <UtBaseLib.h>\n#include <xSIM.h>\n#include <UtLogLib.h>\n#include <stdlib.h>\n#include <time.h>\n#include <SilSocLogicalId.h>\n#include <Library/UtSocLogicalIdMockLib.h>\n#include \"xSimAssignMemoryTp2Ut.h\"\n\n// Variables used for ClearIpApis iteration\n\n/*\n * This structure is used to test the clearing of API buffers in xSimClearIpApis\n * in iteration \"ClearIpApis\"\n */",
                                    "definition": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                    "implementation": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                    "range": [
                                        {
                                            "line": 40,
                                            "character": 0
                                        },
                                        {
                                            "line": 47,
                                            "character": 2
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 40,
                                            "character": 20
                                        },
                                        {
                                            "line": 40,
                                            "character": 27
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SilVars",
                                    "kind": 12,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/UnitTest/Source/xSIM/xSimAssignMemoryTp3Ut/xSimAssignMemoryTp3Ut.c",
                                    "documentation": "/**\n * @file xSimAssignMemoryTp3Ut.c\n * @brief    This UT will test xSimAssignMemoryTp3.\n * @details: It will also test static functions:\n *\n * Unit test implementation: xSimClearIpApis, xSimInitializeIpApis, GetActiveSocIpListTp3\n *\n * xSimAssignMemoryTp3Ut Iteration definitions\n *\n * ClearIpApis:     This iteration is will test the clearing of API buffers\n *                  (I2I/C2R). The buffer defaults are 0xffffffffffffffff for\n *                  index 0, 8, 16. A passing case will result in those indices\n *                  being set to 0.\n * BadSocIpListTp3: This iteration is will test xSimAssignMemoryTp3 when\n *                  GetActiveSocIpListTp3 returns error\n * BadInitIpApis:   This iteration will test execution path of xSimInitializeIpApis\n *                  when LclIpRecord->ApiInit is non-NULL and returns a bad status.\n *                  It will also cover xSimAssignMemoryTp3 branch when\n *                  xSimInitializeIpApis returns a bad status.\n * AssignMemoryTp3: This iteration will test the default (all good) execution path of xSimAssignMemoryTp3.\n *\n */\n\n#include <UtBaseLib.h>\n#include <xSIM.h>\n#include <UtLogLib.h>\n#include <stdlib.h>\n#include <time.h>\n#include <SilSocLogicalId.h>\n#include <Library/UtSocLogicalIdMockLib.h>\n#include \"xSimAssignMemoryTp3Ut.h\"\n\n// Variables used for ClearIpApis iteration\n\n/*\n * This structure is used to test the clearing of API buffers in xSimClearIpApis\n * in iteration \"ClearIpApis\"\n */",
                                    "definition": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                    "implementation": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                    "range": [
                                        {
                                            "line": 40,
                                            "character": 0
                                        },
                                        {
                                            "line": 47,
                                            "character": 2
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 40,
                                            "character": 20
                                        },
                                        {
                                            "line": 40,
                                            "character": 27
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SilVars",
                                    "kind": 12,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/UnitTest/Source/xSIM/xSimClearIpApisUt/xSimClearIpApisUt.c",
                                    "documentation": "/**\n * @file xSimClearIpApisUt.c\n * @brief    This UT will test xSimAssignMemoryTp1.\n * @details: It will also test static functions:\n *\n * Unit test implementation: xSimClearIpApis, xSimInitializeIpApis, GetActiveSocIpListTp1\n *\n * xSimClearIpApisUt Iteration definitions\n *\n * ClearIpApis:     This iteration is will test the clearing of API buffers\n *                  (I2I/C2R). The buffer defaults are 0xffffffffffffffff for\n *                  index 0, 8, 16. A passing case will result in those indices\n *                  being set to 0.\n *\n */\n\n#include <UtBaseLib.h>\n#include <xSIM.h>\n#include <UtLogLib.h>\n#include <stdlib.h>\n#include <time.h>\n#include <IpHandler.h>\n#include \"xSimClearIpApisUt.h\"\n\n// Variables used for ClearIpApis iteration\n\n/*\n * SOC_IP_TABLE for Tp1/2/3 are included only to resolve linker issues. They are not used.\n */\n// TP1 SoC IP Tables\nconst SOC_IP_TABLE *mPlatformSocsTp1[] = {\n  NULL  // End of list marker\n};\n\n// TP2 SoC IP Tables\nconst SOC_IP_TABLE *mPlatformSocsTp2[] = {\n  NULL  // End of list marker\n};\n\n// TP3 SoC IP Tables\nconst SOC_IP_TABLE *mPlatformSocsTp3[] = {\n  NULL  // End of list marker\n};\n\n/*\n * This structure is used to test the clearing of API buffers in xSimClearIpApis\n * in iteration \"ClearIpApis\"\n */",
                                    "definition": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                    "implementation": "SIL_BLOCK_VARIABLES SilVars = {\r\n  .Ip2IpApi[0x0] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x8] = 0xffffffffffffffff,\r\n  .Ip2IpApi[0x10] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[00] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x8] = 0xffffffffffffffff,\r\n  .Common2RevXferTable[0x10] = 0xffffffffffffffff\r\n};",
                                    "range": [
                                        {
                                            "line": 50,
                                            "character": 0
                                        },
                                        {
                                            "line": 57,
                                            "character": 2
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 50,
                                            "character": 20
                                        },
                                        {
                                            "line": 50,
                                            "character": 27
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ERROR",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "range": [
                                        {
                                            "line": 100,
                                            "character": 0
                                        },
                                        {
                                            "line": 100,
                                            "character": 87
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 100,
                                            "character": 8
                                        },
                                        {
                                            "line": 100,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SmuGetGnbHandleCommon",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.c",
                        "documentation": "/**\n * SmuGetGnbHandleCommon\n *\n * @brief   Return GNB_HANDLE of Nbio InstanceId\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   InstanceId  The unique identifier of the SMU instance associated\n *                      with this socket (for GN, the socket number)\n * @param   Handle      Pointer to GNB_HANDLE* to return GNB_HANDLE of this\n *                      InstanceId\n *\n * @retval  SilPass             GnbHandle is found associated with socket\n *                              number\n * @retval  SilInvalidParameter InstanceId did not reference a valid NBIO\n *                              instance\n **/",
                        "definition": "SIL_STATUS\r\nSmuGetGnbHandleCommon (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  GNB_HANDLE     **Handle\r\n  )",
                        "implementation": "SIL_STATUS\r\nSmuGetGnbHandleCommon (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  GNB_HANDLE     **Handle\r\n  )\r\n{\r\n  SIL_STATUS            Status;\r\n  bool                  InstanceFound;\r\n  GNB_HANDLE            *GnbHandle;\r\n  NBIO_IP2IP_API        *NbioIp2Ip;\r\n\r\n  Status = SilInvalidParameter;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  if (SilGetIp2IpApi(SilContext, SilId_NbioClass, (void **)(&NbioIp2Ip)) != SilPass) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \" NBIO API is not found.\\n\");\r\n    return SilNotFound;\r\n  }\r\n  GnbHandle = NbioIp2Ip->GetGnbHandle(SilContext);\r\n\r\n  InstanceFound = false;\r\n  while ((InstanceFound == false) && (GnbHandle != NULL)) {\r\n    if (GnbHandle->SocketId == InstanceId) {\r\n      InstanceFound = true;\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"Instance found.\\n\");\r\n      Status = SilPass;\r\n    } else {\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"Gnb next handle.\\n\");\r\n      GnbHandle = GnbGetNextHandle(GnbHandle);\r\n    }\r\n  }\r\n\r\n  *Handle = GnbHandle;\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Exit Status: 0x%x\\n\", Status);\r\n  return Status;\r\n}",
                        "range": [
                            {
                                "line": 96,
                                "character": 0
                            },
                            {
                                "line": 133,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 97,
                                "character": 0
                            },
                            {
                                "line": 97,
                                "character": 21
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "GNB_HANDLE",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/GnbDxio.h",
                                    "documentation": "",
                                    "definition": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                    "implementation": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                    "range": [
                                        {
                                            "line": 555,
                                            "character": 0
                                        },
                                        {
                                            "line": 555,
                                            "character": 39
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 555,
                                            "character": 28
                                        },
                                        {
                                            "line": 555,
                                            "character": 38
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "NBIO_IP2IP_API",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/NbioIp2Ip.h",
                                    "documentation": "// Define the Ip2Ip API as a struct containing pointers to the above functions",
                                    "definition": "typedef struct {\r\n  NBIO_GET_HANDLE                                  NbioGetHandle;\r\n  NBIO_GET_GNB_HANDLE                              GetGnbHandle;\r\n  NBIO_PCIE_CONFIG_DEBUG_DUMP                      PcieConfigDebugDump;\r\n  NBIO_GET_HOST_PCI_ADDRESS                        GetHostPciAddress;\r\n  NBIO_PCIE_CONFIG_GET_CHILD                       PcieConfigGetChild;\r\n  NBIO_PCIE_CONFIG_GET_PARENT                      PcieConfigGetParent;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES          PcieConfigRunProcForAllEngines;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES_WRAPPER  PcieConfigRunProcForAllEnginesInWrapper;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS         PcieConfigRunProcForAllWrappers;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS_NBIO    PcieConfigRunProcForAllWrappersInNbio;\r\n  NBIO_PCIE_CONFIG_CHECK_PORT_STATUS               PcieConfigCheckPortStatus;\r\n} NBIO_IP2IP_API;",
                                    "implementation": "typedef struct {\r\n  NBIO_GET_HANDLE                                  NbioGetHandle;\r\n  NBIO_GET_GNB_HANDLE                              GetGnbHandle;\r\n  NBIO_PCIE_CONFIG_DEBUG_DUMP                      PcieConfigDebugDump;\r\n  NBIO_GET_HOST_PCI_ADDRESS                        GetHostPciAddress;\r\n  NBIO_PCIE_CONFIG_GET_CHILD                       PcieConfigGetChild;\r\n  NBIO_PCIE_CONFIG_GET_PARENT                      PcieConfigGetParent;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES          PcieConfigRunProcForAllEngines;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES_WRAPPER  PcieConfigRunProcForAllEnginesInWrapper;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS         PcieConfigRunProcForAllWrappers;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS_NBIO    PcieConfigRunProcForAllWrappersInNbio;\r\n  NBIO_PCIE_CONFIG_CHECK_PORT_STATUS               PcieConfigCheckPortStatus;\r\n} NBIO_IP2IP_API;",
                                    "range": [
                                        {
                                            "line": 83,
                                            "character": 0
                                        },
                                        {
                                            "line": 95,
                                            "character": 17
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 95,
                                            "character": 2
                                        },
                                        {
                                            "line": 95,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SMU_TRACEPOINT",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                                    "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                                    "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "range": [
                                        {
                                            "line": 19,
                                            "character": 0
                                        },
                                        {
                                            "line": 24,
                                            "character": 19
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 19,
                                            "character": 8
                                        },
                                        {
                                            "line": 19,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ERROR",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "range": [
                                        {
                                            "line": 100,
                                            "character": 0
                                        },
                                        {
                                            "line": 100,
                                            "character": 87
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 100,
                                            "character": 8
                                        },
                                        {
                                            "line": 100,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "GnbGetNextHandle",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/NbioPcieTopologyHelper.h",
                                    "documentation": "",
                                    "definition": "#define GnbGetNextHandle(Descriptor) \\\r\n        (GNB_HANDLE *) PcieConfigGetNextTopologyDescriptor(Descriptor, DESCRIPTOR_TERMINATE_TOPOLOGY)",
                                    "implementation": "#define GnbGetNextHandle(Descriptor) \\\r\n        (GNB_HANDLE *) PcieConfigGetNextTopologyDescriptor(Descriptor, DESCRIPTOR_TERMINATE_TOPOLOGY)",
                                    "range": [
                                        {
                                            "line": 77,
                                            "character": 0
                                        },
                                        {
                                            "line": 78,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 77,
                                            "character": 8
                                        },
                                        {
                                            "line": 77,
                                            "character": 24
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SilGetIp2IpApi",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                                    "documentation": "/**\n * SilGetIp2IpApi\n *\n * @details This function is used by openSIL IPs to find and return a pointer to the Ip-2-Ip API installed for the\n *          specified IP ID.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP block to request the Ip-2-Ip API for.  The list of\n *                       valid Ids is defined in xSIM-api.h.\n * @param   Api          Upon success, this output is a pointer to the Ip-2-Ip API.\n *\n * @returns SIL_STATUS\n * @retval  SilPass     The Api was found and returned in the Api pointer\n * @retval  SilNotFound No API was installed for IP\n *\n */",
                                    "definition": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )",
                                    "implementation": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )\r\n{\r\n  SIL_STATUS          Status;\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  // Comment this TRACEPOINT to reduce debug output\r\n  //XUSL_TRACEPOINT (SIL_TRACE_INFO, \"Get Ip-2-Ip API for IP ID %d\\n\", IpId);\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n\r\n  Status = SilPass;\r\n\r\n  *Api = (void *)((uintptr_t)SilVars->Ip2IpApi[IpId]);\r\n  if (*Api == NULL) {\r\n    Status = SilNotFound;\r\n    XUSL_TRACEPOINT(SIL_TRACE_ERROR, \"Ip-2-Ip API for IP ID %d NOT FOUND!\\n\", IpId);\r\n    assert(*Api != NULL);// Assert if the requested API is null\r\n  }\r\n\r\n  return Status;\r\n}",
                                    "range": [
                                        {
                                            "line": 190,
                                            "character": 0
                                        },
                                        {
                                            "line": 219,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 191,
                                            "character": 0
                                        },
                                        {
                                            "line": 191,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SIL_STATUS",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                                "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                                "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                "range": [
                                                    {
                                                        "line": 49,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 74,
                                                        "character": 13
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 74,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 74,
                                                        "character": 12
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_CONTEXT",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                                "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                                "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                "range": [
                                                    {
                                                        "line": 131,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 135,
                                                        "character": 14
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 135,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 135,
                                                        "character": 13
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_DATA_BLOCK_ID",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                                "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                                "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                                "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                                "range": [
                                                    {
                                                        "line": 48,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 73,
                                                        "character": 20
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 73,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 73,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_BLOCK_VARIABLES",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                                "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                                "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                                "range": [
                                                    {
                                                        "line": 182,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 193,
                                                        "character": 22
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 193,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 193,
                                                        "character": 21
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_TRACE_ERROR",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                                "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                "range": [
                                                    {
                                                        "line": 100,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 100,
                                                        "character": 87
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 100,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 100,
                                                        "character": 23
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SmuServiceInitArgumentsCommon",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.c",
                        "documentation": "/**\n * SmuServiceInitArgumentsCommon\n *\n * @brief Routine to Init argument to 0\n *\n * @param  SmuArg Input Request Argument buffer to initialize\n */",
                        "definition": "void\r\nSmuServiceInitArgumentsCommon (\r\n  uint32_t *SmuArg\r\n  )",
                        "implementation": "void\r\nSmuServiceInitArgumentsCommon (\r\n  uint32_t *SmuArg\r\n  )\r\n{\r\n  memset(SmuArg, 0x0, SMU_ARGUMENT_SIZE);\r\n}",
                        "range": [
                            {
                                "line": 23,
                                "character": 0
                            },
                            {
                                "line": 29,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 24,
                                "character": 0
                            },
                            {
                                "line": 24,
                                "character": 29
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMU_ARGUMENT_SIZE",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                                    "documentation": "/**\n * @file  SmuDefs.h\n * This file contains enums for SMU response types.\n */",
                                    "definition": "#define SMU_ARGUMENT_SIZE              24",
                                    "implementation": "#define SMU_ARGUMENT_SIZE              24",
                                    "range": [
                                        {
                                            "line": 9,
                                            "character": 0
                                        },
                                        {
                                            "line": 9,
                                            "character": 41
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 9,
                                            "character": 8
                                        },
                                        {
                                            "line": 9,
                                            "character": 25
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "memset",
                                    "kind": 11,
                                    "uri": "file:///c%3A/Program%20Files%20%28x86%29/Microsoft%20Visual%20Studio/2019/Community/VC/Tools/MSVC/14.29.30133/include/vcruntime_string.h",
                                    "documentation": "",
                                    "definition": "void* __cdecl memset(\r\n    _Out_writes_bytes_all_(_Size) void*  _Dst,\r\n    _In_                          int    _Val,\r\n    _In_                          size_t _Size\r\n    );",
                                    "implementation": "void* __cdecl memset(\r\n    _Out_writes_bytes_all_(_Size) void*  _Dst,\r\n    _In_                          int    _Val,\r\n    _In_                          size_t _Size\r\n    );",
                                    "range": [
                                        {
                                            "line": 62,
                                            "character": 0
                                        },
                                        {
                                            "line": 66,
                                            "character": 6
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 62,
                                            "character": 14
                                        },
                                        {
                                            "line": 62,
                                            "character": 20
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SmuServiceRequestPhx",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
                        "documentation": "/**\n * SmuServiceRequestPhx\n *\n * @brief   SMU service request for PHX\n *\n * @param   PciAddress      PCI_ADDR of this NBIO\n * @param   RequestId       BIOS to SMU Message ID\n * @param   RequestArgument Request Argument\n * @param   AccessFlags     See GNB_ACCESS_FLAGS_* definitions\n *\n * @retval  SMC_RESULT\n */",
                        "definition": "SMC_RESULT\r\nSmuServiceRequestPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )",
                        "implementation": "SMC_RESULT\r\nSmuServiceRequestPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )\r\n{\r\n  uint32_t SmuMessageResponse;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  if (RequestId > SMC_Message_Count_PHX) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \"SmuServiceRequest INVALID!!.\\n\");\r\n    return SMC_Result_OK;\r\n  }\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Service Request 0x%x\\n\", RequestId);\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n    \"Service Request Argument 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\\n\",\r\n    RequestArgument[0],\r\n    RequestArgument[1],\r\n    RequestArgument[2],\r\n    RequestArgument[3],\r\n    RequestArgument[4],\r\n    RequestArgument[5]\r\n    );\r\n\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n\r\n  // 1 Clear Response\r\n  SmuMessageResponse = 0;\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10578, SmuMessageResponse);\r\n\r\n  // 2 Write message arguments\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10998, RequestArgument[0]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B1099C, RequestArgument[1]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A0, RequestArgument[2]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A4, RequestArgument[3]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A8, RequestArgument[4]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109AC, RequestArgument[5]);\r\n\r\n  // 3 Write message ID\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10528, (uint32_t)RequestId);\r\n\r\n  // 4 Poll Response until non-zero\r\n  do {\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n    SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n      \"Poll SMU Message Response until non-zero!! Current SMU Message Response 0x%x\\n\",\r\n      SmuMessageResponse\r\n      );\r\n  } while (SmuMessageResponse == 0x0);\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"After SMU Message Responded!!\\n\");\r\n\r\n  if ((SMC_RESULT)SmuMessageResponse == SMC_Result_Fatal) {\r\n    assert((SMC_RESULT)SmuMessageResponse != SMC_Result_Fatal);\r\n    return SMC_Result_Fatal;\r\n  }\r\n\r\n  // 5 Read updated SMU message arguments\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10998, &RequestArgument[0]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B1099C, &RequestArgument[1]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A0, &RequestArgument[2]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A4, &RequestArgument[3]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A8, &RequestArgument[4]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109AC, &RequestArgument[5]);\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return (SMC_RESULT)SmuMessageResponse;\r\n}",
                        "range": [
                            {
                                "line": 133,
                                "character": 0
                            },
                            {
                                "line": 203,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 134,
                                "character": 0
                            },
                            {
                                "line": 134,
                                "character": 20
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMC_RESULT",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                                    "documentation": "/// SMU Response Codes",
                                    "definition": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                                    "implementation": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                                    "range": [
                                        {
                                            "line": 13,
                                            "character": 0
                                        },
                                        {
                                            "line": 20,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 20,
                                            "character": 2
                                        },
                                        {
                                            "line": 20,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "PCI_ADDR",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/Pci.h",
                                    "documentation": "/// Union type for PCI address",
                                    "definition": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                                    "implementation": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                                    "range": [
                                        {
                                            "line": 43,
                                            "character": 0
                                        },
                                        {
                                            "line": 46,
                                            "character": 11
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 46,
                                            "character": 2
                                        },
                                        {
                                            "line": 46,
                                            "character": 10
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SMU_TRACEPOINT",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                                    "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                                    "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "range": [
                                        {
                                            "line": 19,
                                            "character": 0
                                        },
                                        {
                                            "line": 24,
                                            "character": 19
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 19,
                                            "character": 8
                                        },
                                        {
                                            "line": 19,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SMC_Message_Count_PHX",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.h",
                                    "documentation": "/// BIOS to SMU Message Definitions for Phoenix",
                                    "definition": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                                    "implementation": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                                    "range": [
                                        {
                                            "line": 14,
                                            "character": 0
                                        },
                                        {
                                            "line": 14,
                                            "character": 95
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 14,
                                            "character": 8
                                        },
                                        {
                                            "line": 14,
                                            "character": 29
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ERROR",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "range": [
                                        {
                                            "line": 100,
                                            "character": 0
                                        },
                                        {
                                            "line": 100,
                                            "character": 87
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 100,
                                            "character": 8
                                        },
                                        {
                                            "line": 100,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B10578",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B10578   0x3B10578UL",
                                    "implementation": "#define MP1MMIOx3B10578   0x3B10578UL",
                                    "range": [
                                        {
                                            "line": 22,
                                            "character": 0
                                        },
                                        {
                                            "line": 22,
                                            "character": 37
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 22,
                                            "character": 8
                                        },
                                        {
                                            "line": 22,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B10998",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B10998 0x3B10998ul",
                                    "implementation": "#define MP1MMIOx3B10998 0x3B10998ul",
                                    "range": [
                                        {
                                            "line": 15,
                                            "character": 0
                                        },
                                        {
                                            "line": 15,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 15,
                                            "character": 8
                                        },
                                        {
                                            "line": 15,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B1099C",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                                    "implementation": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                                    "range": [
                                        {
                                            "line": 16,
                                            "character": 0
                                        },
                                        {
                                            "line": 16,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 16,
                                            "character": 8
                                        },
                                        {
                                            "line": 16,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109A0",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                                    "implementation": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                                    "range": [
                                        {
                                            "line": 17,
                                            "character": 0
                                        },
                                        {
                                            "line": 17,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 17,
                                            "character": 8
                                        },
                                        {
                                            "line": 17,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109A4",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                                    "implementation": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                                    "range": [
                                        {
                                            "line": 18,
                                            "character": 0
                                        },
                                        {
                                            "line": 18,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 18,
                                            "character": 8
                                        },
                                        {
                                            "line": 18,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109A8",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                                    "implementation": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                                    "range": [
                                        {
                                            "line": 19,
                                            "character": 0
                                        },
                                        {
                                            "line": 19,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 19,
                                            "character": 8
                                        },
                                        {
                                            "line": 19,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109AC",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109AC 0x3B109ACul",
                                    "implementation": "#define MP1MMIOx3B109AC 0x3B109ACul",
                                    "range": [
                                        {
                                            "line": 20,
                                            "character": 0
                                        },
                                        {
                                            "line": 20,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 20,
                                            "character": 8
                                        },
                                        {
                                            "line": 20,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B10528",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B10528    0x3B10528ul",
                                    "implementation": "#define MP1MMIOx3B10528    0x3B10528ul",
                                    "range": [
                                        {
                                            "line": 21,
                                            "character": 0
                                        },
                                        {
                                            "line": 21,
                                            "character": 38
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 21,
                                            "character": 8
                                        },
                                        {
                                            "line": 21,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "xUSLIndirectPciRead32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Indirect Pci Read Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         pointer to hold read value.\n *\n */",
                                    "definition": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)",
                                    "implementation": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  *Value = xUSLPciRead32(PciBase + sizeof (uint32_t));\r\n}",
                                    "range": [
                                        {
                                            "line": 162,
                                            "character": 0
                                        },
                                        {
                                            "line": 167,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 162,
                                            "character": 5
                                        },
                                        {
                                            "line": 162,
                                            "character": 26
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SMNx00B8",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                                "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                "definition": "#define SMNx00B8  0x00B8",
                                                "implementation": "#define SMNx00B8  0x00B8",
                                                "range": [
                                                    {
                                                        "line": 11,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 24
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 11,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 16
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "xUSLPciWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                                "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                                "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 80,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 83,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 80,
                                                        "character": 5
                                                    },
                                                    {
                                                        "line": 80,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressWrite32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                            "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 46,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 19
                                                                },
                                                                {
                                                                    "line": 43,
                                                                    "character": 40
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "xUSLPciRead32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Read 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n *\n */",
                                                "definition": "uint32_t xUSLPciRead32 (uint32_t Address)",
                                                "implementation": "uint32_t xUSLPciRead32 (uint32_t Address)\r\n{\r\n  return xUSLPciExpressRead32((void *)(size_t)Address);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 68,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 71,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 68,
                                                        "character": 9
                                                    },
                                                    {
                                                        "line": 68,
                                                        "character": 22
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressRead32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)",
                                                            "implementation": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)\r\n{\r\n  return *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS));\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 23,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 26,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 23,
                                                                    "character": 23
                                                                },
                                                                {
                                                                    "line": 23,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "xUSLIndirectPciWrite32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Indirect Pci Write Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         The value to be written.\n *\n */",
                                    "definition": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)",
                                    "implementation": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  xUSLPciWrite32(PciBase + sizeof (uint32_t), Value);\r\n}",
                                    "range": [
                                        {
                                            "line": 176,
                                            "character": 0
                                        },
                                        {
                                            "line": 181,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 176,
                                            "character": 5
                                        },
                                        {
                                            "line": 176,
                                            "character": 27
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SMNx00B8",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                                "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                "definition": "#define SMNx00B8  0x00B8",
                                                "implementation": "#define SMNx00B8  0x00B8",
                                                "range": [
                                                    {
                                                        "line": 11,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 24
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 11,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 16
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "xUSLPciWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                                "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                                "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 80,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 83,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 80,
                                                        "character": 5
                                                    },
                                                    {
                                                        "line": 80,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressWrite32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                            "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 46,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 19
                                                                },
                                                                {
                                                                    "line": 43,
                                                                    "character": 40
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "SmuReadBrandStringPhx",
            "kind": 11,
            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
            "documentation": "/**\n * SmuReadBrandStringPhx\n *\n * @brief Returns the brand string read from SMN space.\n *\n * @param   SilContext        A context structure through which host firmware defined data\n *                            can be passed to openSIL. The host firmware is responsible\n *                            for initializing the SIL_CONTEXT structure.\n * @param   InstanceId        The unique identifier of the SMU instance\n *                            associated with this socket (for GN, the socket\n *                            number)\n * @param   BrandStringLength Number of characters to be read.  This value does\n *                            NOT have to be a multiple of 4.\n                              NBIO code will be responsible for alignment,\n                              endianness, and string length.\n * @param   BrandString       Pointer to a CHAR array to store the brand\n                              string.\n *\n * @return SIL_STATUS\n **/",
            "definition": "SIL_STATUS\r\nSmuReadBrandStringPhx (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  uint32_t       BrandStringLength,\r\n  uint8_t        *BrandString\r\n  )",
            "implementation": "SIL_STATUS\r\nSmuReadBrandStringPhx (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  uint32_t       BrandStringLength,\r\n  uint8_t        *BrandString\r\n  )\r\n{\r\n  GNB_HANDLE                  *GnbHandle = NULL;\r\n  SIL_STATUS                  Status = SilPass;\r\n  uint32_t                    SmuArg[6];\r\n  uint32_t                    SmuResult;\r\n  uint8_t                     *StringPtr;\r\n  uint32_t                    StringCount;\r\n  uint32_t                    ByteCount;\r\n  uint32_t                    Iteration;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  Status = SmuGetGnbHandleCommon(SilContext, InstanceId, &GnbHandle);\r\n  if (Status == SilPass) {\r\n    SMU_TRACEPOINT(SIL_TRACE_INFO, \"GnbHandle Found.\\n\");\r\n    StringCount = BrandStringLength;\r\n    StringPtr = BrandString;\r\n    Iteration = 0;\r\n    while (StringCount != 0) {\r\n      SmuServiceInitArgumentsCommon(SmuArg);\r\n      SmuArg[0] = Iteration++;\r\n      SmuResult = SmuServiceRequestPhx(GnbHandle->Address,\r\n        SMC_MSG_GetNameString_PHX,\r\n        SmuArg,\r\n        0\r\n        );\r\n      if (SmuResult == SMC_Result_OK) {\r\n        ByteCount = (StringCount < STRING_COUNT_LIMIT) ? StringCount : STRING_COUNT_LIMIT;\r\n        memcpy(StringPtr, SmuArg, ByteCount);\r\n        StringPtr += ByteCount;\r\n        StringCount -= ByteCount;\r\n      } else {\r\n        Status = SilInvalidParameter;\r\n        SMU_TRACEPOINT(SIL_TRACE_INFO, \"SmuRequestFail!!\\n\");\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_EXIT, \"Exit Status:0x%x.\\n\", Status);\r\n  return Status;\r\n}",
            "range": [
                {
                    "line": 426,
                    "character": 0
                },
                {
                    "line": 474,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 427,
                    "character": 0
                },
                {
                    "line": 427,
                    "character": 21
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "GNB_HANDLE",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/GnbDxio.h",
                        "documentation": "",
                        "definition": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                        "implementation": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                        "range": [
                            {
                                "line": 555,
                                "character": 0
                            },
                            {
                                "line": 555,
                                "character": 39
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 555,
                                "character": 28
                            },
                            {
                                "line": 555,
                                "character": 38
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMU_TRACEPOINT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                        "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                        "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "range": [
                            {
                                "line": 19,
                                "character": 0
                            },
                            {
                                "line": 24,
                                "character": 19
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 19,
                                "character": 8
                            },
                            {
                                "line": 19,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_ENTRY",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                        "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                        "range": [
                            {
                                "line": 102,
                                "character": 0
                            },
                            {
                                "line": 102,
                                "character": 70
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 102,
                                "character": 8
                            },
                            {
                                "line": 102,
                                "character": 23
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_INFO",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "range": [
                            {
                                "line": 104,
                                "character": 0
                            },
                            {
                                "line": 104,
                                "character": 118
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 104,
                                "character": 8
                            },
                            {
                                "line": 104,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMC_MSG_GetNameString_PHX",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.h",
                        "documentation": "/// BIOS to SMU Message Definitions for Phoenix",
                        "definition": "#define SMC_MSG_GetNameString_PHX                       0x4  ///< Get CPU name string",
                        "implementation": "#define SMC_MSG_GetNameString_PHX                       0x4  ///< Get CPU name string",
                        "range": [
                            {
                                "line": 11,
                                "character": 0
                            },
                            {
                                "line": 11,
                                "character": 85
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 11,
                                "character": 8
                            },
                            {
                                "line": 11,
                                "character": 33
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "STRING_COUNT_LIMIT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                        "documentation": "/// Common BIOS to SMU Message Definitions",
                        "definition": "#define STRING_COUNT_LIMIT             4",
                        "implementation": "#define STRING_COUNT_LIMIT             4",
                        "range": [
                            {
                                "line": 109,
                                "character": 0
                            },
                            {
                                "line": 109,
                                "character": 40
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 109,
                                "character": 8
                            },
                            {
                                "line": 109,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_EXIT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                        "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                        "range": [
                            {
                                "line": 103,
                                "character": 0
                            },
                            {
                                "line": 103,
                                "character": 69
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 103,
                                "character": 8
                            },
                            {
                                "line": 103,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SmuGetGnbHandleCommon",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.c",
                        "documentation": "/**\n * SmuGetGnbHandleCommon\n *\n * @brief   Return GNB_HANDLE of Nbio InstanceId\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   InstanceId  The unique identifier of the SMU instance associated\n *                      with this socket (for GN, the socket number)\n * @param   Handle      Pointer to GNB_HANDLE* to return GNB_HANDLE of this\n *                      InstanceId\n *\n * @retval  SilPass             GnbHandle is found associated with socket\n *                              number\n * @retval  SilInvalidParameter InstanceId did not reference a valid NBIO\n *                              instance\n **/",
                        "definition": "SIL_STATUS\r\nSmuGetGnbHandleCommon (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  GNB_HANDLE     **Handle\r\n  )",
                        "implementation": "SIL_STATUS\r\nSmuGetGnbHandleCommon (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  GNB_HANDLE     **Handle\r\n  )\r\n{\r\n  SIL_STATUS            Status;\r\n  bool                  InstanceFound;\r\n  GNB_HANDLE            *GnbHandle;\r\n  NBIO_IP2IP_API        *NbioIp2Ip;\r\n\r\n  Status = SilInvalidParameter;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  if (SilGetIp2IpApi(SilContext, SilId_NbioClass, (void **)(&NbioIp2Ip)) != SilPass) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \" NBIO API is not found.\\n\");\r\n    return SilNotFound;\r\n  }\r\n  GnbHandle = NbioIp2Ip->GetGnbHandle(SilContext);\r\n\r\n  InstanceFound = false;\r\n  while ((InstanceFound == false) && (GnbHandle != NULL)) {\r\n    if (GnbHandle->SocketId == InstanceId) {\r\n      InstanceFound = true;\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"Instance found.\\n\");\r\n      Status = SilPass;\r\n    } else {\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"Gnb next handle.\\n\");\r\n      GnbHandle = GnbGetNextHandle(GnbHandle);\r\n    }\r\n  }\r\n\r\n  *Handle = GnbHandle;\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Exit Status: 0x%x\\n\", Status);\r\n  return Status;\r\n}",
                        "range": [
                            {
                                "line": 96,
                                "character": 0
                            },
                            {
                                "line": 133,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 97,
                                "character": 0
                            },
                            {
                                "line": 97,
                                "character": 21
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "GNB_HANDLE",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/GnbDxio.h",
                                    "documentation": "",
                                    "definition": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                    "implementation": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                    "range": [
                                        {
                                            "line": 555,
                                            "character": 0
                                        },
                                        {
                                            "line": 555,
                                            "character": 39
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 555,
                                            "character": 28
                                        },
                                        {
                                            "line": 555,
                                            "character": 38
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "NBIO_IP2IP_API",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/NbioIp2Ip.h",
                                    "documentation": "// Define the Ip2Ip API as a struct containing pointers to the above functions",
                                    "definition": "typedef struct {\r\n  NBIO_GET_HANDLE                                  NbioGetHandle;\r\n  NBIO_GET_GNB_HANDLE                              GetGnbHandle;\r\n  NBIO_PCIE_CONFIG_DEBUG_DUMP                      PcieConfigDebugDump;\r\n  NBIO_GET_HOST_PCI_ADDRESS                        GetHostPciAddress;\r\n  NBIO_PCIE_CONFIG_GET_CHILD                       PcieConfigGetChild;\r\n  NBIO_PCIE_CONFIG_GET_PARENT                      PcieConfigGetParent;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES          PcieConfigRunProcForAllEngines;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES_WRAPPER  PcieConfigRunProcForAllEnginesInWrapper;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS         PcieConfigRunProcForAllWrappers;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS_NBIO    PcieConfigRunProcForAllWrappersInNbio;\r\n  NBIO_PCIE_CONFIG_CHECK_PORT_STATUS               PcieConfigCheckPortStatus;\r\n} NBIO_IP2IP_API;",
                                    "implementation": "typedef struct {\r\n  NBIO_GET_HANDLE                                  NbioGetHandle;\r\n  NBIO_GET_GNB_HANDLE                              GetGnbHandle;\r\n  NBIO_PCIE_CONFIG_DEBUG_DUMP                      PcieConfigDebugDump;\r\n  NBIO_GET_HOST_PCI_ADDRESS                        GetHostPciAddress;\r\n  NBIO_PCIE_CONFIG_GET_CHILD                       PcieConfigGetChild;\r\n  NBIO_PCIE_CONFIG_GET_PARENT                      PcieConfigGetParent;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES          PcieConfigRunProcForAllEngines;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES_WRAPPER  PcieConfigRunProcForAllEnginesInWrapper;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS         PcieConfigRunProcForAllWrappers;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS_NBIO    PcieConfigRunProcForAllWrappersInNbio;\r\n  NBIO_PCIE_CONFIG_CHECK_PORT_STATUS               PcieConfigCheckPortStatus;\r\n} NBIO_IP2IP_API;",
                                    "range": [
                                        {
                                            "line": 83,
                                            "character": 0
                                        },
                                        {
                                            "line": 95,
                                            "character": 17
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 95,
                                            "character": 2
                                        },
                                        {
                                            "line": 95,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SMU_TRACEPOINT",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                                    "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                                    "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "range": [
                                        {
                                            "line": 19,
                                            "character": 0
                                        },
                                        {
                                            "line": 24,
                                            "character": 19
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 19,
                                            "character": 8
                                        },
                                        {
                                            "line": 19,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ERROR",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "range": [
                                        {
                                            "line": 100,
                                            "character": 0
                                        },
                                        {
                                            "line": 100,
                                            "character": 87
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 100,
                                            "character": 8
                                        },
                                        {
                                            "line": 100,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "GnbGetNextHandle",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/NbioPcieTopologyHelper.h",
                                    "documentation": "",
                                    "definition": "#define GnbGetNextHandle(Descriptor) \\\r\n        (GNB_HANDLE *) PcieConfigGetNextTopologyDescriptor(Descriptor, DESCRIPTOR_TERMINATE_TOPOLOGY)",
                                    "implementation": "#define GnbGetNextHandle(Descriptor) \\\r\n        (GNB_HANDLE *) PcieConfigGetNextTopologyDescriptor(Descriptor, DESCRIPTOR_TERMINATE_TOPOLOGY)",
                                    "range": [
                                        {
                                            "line": 77,
                                            "character": 0
                                        },
                                        {
                                            "line": 78,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 77,
                                            "character": 8
                                        },
                                        {
                                            "line": 77,
                                            "character": 24
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SilGetIp2IpApi",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                                    "documentation": "/**\n * SilGetIp2IpApi\n *\n * @details This function is used by openSIL IPs to find and return a pointer to the Ip-2-Ip API installed for the\n *          specified IP ID.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP block to request the Ip-2-Ip API for.  The list of\n *                       valid Ids is defined in xSIM-api.h.\n * @param   Api          Upon success, this output is a pointer to the Ip-2-Ip API.\n *\n * @returns SIL_STATUS\n * @retval  SilPass     The Api was found and returned in the Api pointer\n * @retval  SilNotFound No API was installed for IP\n *\n */",
                                    "definition": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )",
                                    "implementation": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )\r\n{\r\n  SIL_STATUS          Status;\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  // Comment this TRACEPOINT to reduce debug output\r\n  //XUSL_TRACEPOINT (SIL_TRACE_INFO, \"Get Ip-2-Ip API for IP ID %d\\n\", IpId);\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n\r\n  Status = SilPass;\r\n\r\n  *Api = (void *)((uintptr_t)SilVars->Ip2IpApi[IpId]);\r\n  if (*Api == NULL) {\r\n    Status = SilNotFound;\r\n    XUSL_TRACEPOINT(SIL_TRACE_ERROR, \"Ip-2-Ip API for IP ID %d NOT FOUND!\\n\", IpId);\r\n    assert(*Api != NULL);// Assert if the requested API is null\r\n  }\r\n\r\n  return Status;\r\n}",
                                    "range": [
                                        {
                                            "line": 190,
                                            "character": 0
                                        },
                                        {
                                            "line": 219,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 191,
                                            "character": 0
                                        },
                                        {
                                            "line": 191,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SIL_STATUS",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                                "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                                "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                "range": [
                                                    {
                                                        "line": 49,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 74,
                                                        "character": 13
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 74,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 74,
                                                        "character": 12
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_CONTEXT",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                                "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                                "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                "range": [
                                                    {
                                                        "line": 131,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 135,
                                                        "character": 14
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 135,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 135,
                                                        "character": 13
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_DATA_BLOCK_ID",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                                "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                                "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                                "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                                "range": [
                                                    {
                                                        "line": 48,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 73,
                                                        "character": 20
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 73,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 73,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_BLOCK_VARIABLES",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                                "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                                "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                                "range": [
                                                    {
                                                        "line": 182,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 193,
                                                        "character": 22
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 193,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 193,
                                                        "character": 21
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_TRACE_ERROR",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                                "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                "range": [
                                                    {
                                                        "line": 100,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 100,
                                                        "character": 87
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 100,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 100,
                                                        "character": 23
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SmuServiceInitArgumentsCommon",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.c",
                        "documentation": "/**\n * SmuServiceInitArgumentsCommon\n *\n * @brief Routine to Init argument to 0\n *\n * @param  SmuArg Input Request Argument buffer to initialize\n */",
                        "definition": "void\r\nSmuServiceInitArgumentsCommon (\r\n  uint32_t *SmuArg\r\n  )",
                        "implementation": "void\r\nSmuServiceInitArgumentsCommon (\r\n  uint32_t *SmuArg\r\n  )\r\n{\r\n  memset(SmuArg, 0x0, SMU_ARGUMENT_SIZE);\r\n}",
                        "range": [
                            {
                                "line": 23,
                                "character": 0
                            },
                            {
                                "line": 29,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 24,
                                "character": 0
                            },
                            {
                                "line": 24,
                                "character": 29
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMU_ARGUMENT_SIZE",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                                    "documentation": "/**\n * @file  SmuDefs.h\n * This file contains enums for SMU response types.\n */",
                                    "definition": "#define SMU_ARGUMENT_SIZE              24",
                                    "implementation": "#define SMU_ARGUMENT_SIZE              24",
                                    "range": [
                                        {
                                            "line": 9,
                                            "character": 0
                                        },
                                        {
                                            "line": 9,
                                            "character": 41
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 9,
                                            "character": 8
                                        },
                                        {
                                            "line": 9,
                                            "character": 25
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "memset",
                                    "kind": 11,
                                    "uri": "file:///c%3A/Program%20Files%20%28x86%29/Microsoft%20Visual%20Studio/2019/Community/VC/Tools/MSVC/14.29.30133/include/vcruntime_string.h",
                                    "documentation": "",
                                    "definition": "void* __cdecl memset(\r\n    _Out_writes_bytes_all_(_Size) void*  _Dst,\r\n    _In_                          int    _Val,\r\n    _In_                          size_t _Size\r\n    );",
                                    "implementation": "void* __cdecl memset(\r\n    _Out_writes_bytes_all_(_Size) void*  _Dst,\r\n    _In_                          int    _Val,\r\n    _In_                          size_t _Size\r\n    );",
                                    "range": [
                                        {
                                            "line": 62,
                                            "character": 0
                                        },
                                        {
                                            "line": 66,
                                            "character": 6
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 62,
                                            "character": 14
                                        },
                                        {
                                            "line": 62,
                                            "character": 20
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SmuServiceRequestPhx",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
                        "documentation": "/**\n * SmuServiceRequestPhx\n *\n * @brief   SMU service request for PHX\n *\n * @param   PciAddress      PCI_ADDR of this NBIO\n * @param   RequestId       BIOS to SMU Message ID\n * @param   RequestArgument Request Argument\n * @param   AccessFlags     See GNB_ACCESS_FLAGS_* definitions\n *\n * @retval  SMC_RESULT\n */",
                        "definition": "SMC_RESULT\r\nSmuServiceRequestPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )",
                        "implementation": "SMC_RESULT\r\nSmuServiceRequestPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )\r\n{\r\n  uint32_t SmuMessageResponse;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  if (RequestId > SMC_Message_Count_PHX) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \"SmuServiceRequest INVALID!!.\\n\");\r\n    return SMC_Result_OK;\r\n  }\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Service Request 0x%x\\n\", RequestId);\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n    \"Service Request Argument 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\\n\",\r\n    RequestArgument[0],\r\n    RequestArgument[1],\r\n    RequestArgument[2],\r\n    RequestArgument[3],\r\n    RequestArgument[4],\r\n    RequestArgument[5]\r\n    );\r\n\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n\r\n  // 1 Clear Response\r\n  SmuMessageResponse = 0;\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10578, SmuMessageResponse);\r\n\r\n  // 2 Write message arguments\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10998, RequestArgument[0]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B1099C, RequestArgument[1]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A0, RequestArgument[2]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A4, RequestArgument[3]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A8, RequestArgument[4]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109AC, RequestArgument[5]);\r\n\r\n  // 3 Write message ID\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10528, (uint32_t)RequestId);\r\n\r\n  // 4 Poll Response until non-zero\r\n  do {\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n    SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n      \"Poll SMU Message Response until non-zero!! Current SMU Message Response 0x%x\\n\",\r\n      SmuMessageResponse\r\n      );\r\n  } while (SmuMessageResponse == 0x0);\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"After SMU Message Responded!!\\n\");\r\n\r\n  if ((SMC_RESULT)SmuMessageResponse == SMC_Result_Fatal) {\r\n    assert((SMC_RESULT)SmuMessageResponse != SMC_Result_Fatal);\r\n    return SMC_Result_Fatal;\r\n  }\r\n\r\n  // 5 Read updated SMU message arguments\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10998, &RequestArgument[0]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B1099C, &RequestArgument[1]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A0, &RequestArgument[2]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A4, &RequestArgument[3]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A8, &RequestArgument[4]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109AC, &RequestArgument[5]);\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return (SMC_RESULT)SmuMessageResponse;\r\n}",
                        "range": [
                            {
                                "line": 133,
                                "character": 0
                            },
                            {
                                "line": 203,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 134,
                                "character": 0
                            },
                            {
                                "line": 134,
                                "character": 20
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMC_RESULT",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                                    "documentation": "/// SMU Response Codes",
                                    "definition": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                                    "implementation": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                                    "range": [
                                        {
                                            "line": 13,
                                            "character": 0
                                        },
                                        {
                                            "line": 20,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 20,
                                            "character": 2
                                        },
                                        {
                                            "line": 20,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "PCI_ADDR",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/Pci.h",
                                    "documentation": "/// Union type for PCI address",
                                    "definition": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                                    "implementation": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                                    "range": [
                                        {
                                            "line": 43,
                                            "character": 0
                                        },
                                        {
                                            "line": 46,
                                            "character": 11
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 46,
                                            "character": 2
                                        },
                                        {
                                            "line": 46,
                                            "character": 10
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SMU_TRACEPOINT",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                                    "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                                    "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "range": [
                                        {
                                            "line": 19,
                                            "character": 0
                                        },
                                        {
                                            "line": 24,
                                            "character": 19
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 19,
                                            "character": 8
                                        },
                                        {
                                            "line": 19,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SMC_Message_Count_PHX",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.h",
                                    "documentation": "/// BIOS to SMU Message Definitions for Phoenix",
                                    "definition": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                                    "implementation": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                                    "range": [
                                        {
                                            "line": 14,
                                            "character": 0
                                        },
                                        {
                                            "line": 14,
                                            "character": 95
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 14,
                                            "character": 8
                                        },
                                        {
                                            "line": 14,
                                            "character": 29
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ERROR",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "range": [
                                        {
                                            "line": 100,
                                            "character": 0
                                        },
                                        {
                                            "line": 100,
                                            "character": 87
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 100,
                                            "character": 8
                                        },
                                        {
                                            "line": 100,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B10578",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B10578   0x3B10578UL",
                                    "implementation": "#define MP1MMIOx3B10578   0x3B10578UL",
                                    "range": [
                                        {
                                            "line": 22,
                                            "character": 0
                                        },
                                        {
                                            "line": 22,
                                            "character": 37
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 22,
                                            "character": 8
                                        },
                                        {
                                            "line": 22,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B10998",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B10998 0x3B10998ul",
                                    "implementation": "#define MP1MMIOx3B10998 0x3B10998ul",
                                    "range": [
                                        {
                                            "line": 15,
                                            "character": 0
                                        },
                                        {
                                            "line": 15,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 15,
                                            "character": 8
                                        },
                                        {
                                            "line": 15,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B1099C",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                                    "implementation": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                                    "range": [
                                        {
                                            "line": 16,
                                            "character": 0
                                        },
                                        {
                                            "line": 16,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 16,
                                            "character": 8
                                        },
                                        {
                                            "line": 16,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109A0",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                                    "implementation": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                                    "range": [
                                        {
                                            "line": 17,
                                            "character": 0
                                        },
                                        {
                                            "line": 17,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 17,
                                            "character": 8
                                        },
                                        {
                                            "line": 17,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109A4",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                                    "implementation": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                                    "range": [
                                        {
                                            "line": 18,
                                            "character": 0
                                        },
                                        {
                                            "line": 18,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 18,
                                            "character": 8
                                        },
                                        {
                                            "line": 18,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109A8",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                                    "implementation": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                                    "range": [
                                        {
                                            "line": 19,
                                            "character": 0
                                        },
                                        {
                                            "line": 19,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 19,
                                            "character": 8
                                        },
                                        {
                                            "line": 19,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109AC",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109AC 0x3B109ACul",
                                    "implementation": "#define MP1MMIOx3B109AC 0x3B109ACul",
                                    "range": [
                                        {
                                            "line": 20,
                                            "character": 0
                                        },
                                        {
                                            "line": 20,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 20,
                                            "character": 8
                                        },
                                        {
                                            "line": 20,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B10528",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B10528    0x3B10528ul",
                                    "implementation": "#define MP1MMIOx3B10528    0x3B10528ul",
                                    "range": [
                                        {
                                            "line": 21,
                                            "character": 0
                                        },
                                        {
                                            "line": 21,
                                            "character": 38
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 21,
                                            "character": 8
                                        },
                                        {
                                            "line": 21,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "xUSLIndirectPciRead32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Indirect Pci Read Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         pointer to hold read value.\n *\n */",
                                    "definition": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)",
                                    "implementation": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  *Value = xUSLPciRead32(PciBase + sizeof (uint32_t));\r\n}",
                                    "range": [
                                        {
                                            "line": 162,
                                            "character": 0
                                        },
                                        {
                                            "line": 167,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 162,
                                            "character": 5
                                        },
                                        {
                                            "line": 162,
                                            "character": 26
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SMNx00B8",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                                "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                "definition": "#define SMNx00B8  0x00B8",
                                                "implementation": "#define SMNx00B8  0x00B8",
                                                "range": [
                                                    {
                                                        "line": 11,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 24
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 11,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 16
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "xUSLPciWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                                "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                                "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 80,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 83,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 80,
                                                        "character": 5
                                                    },
                                                    {
                                                        "line": 80,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressWrite32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                            "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 46,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 19
                                                                },
                                                                {
                                                                    "line": 43,
                                                                    "character": 40
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "xUSLPciRead32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Read 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n *\n */",
                                                "definition": "uint32_t xUSLPciRead32 (uint32_t Address)",
                                                "implementation": "uint32_t xUSLPciRead32 (uint32_t Address)\r\n{\r\n  return xUSLPciExpressRead32((void *)(size_t)Address);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 68,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 71,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 68,
                                                        "character": 9
                                                    },
                                                    {
                                                        "line": 68,
                                                        "character": 22
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressRead32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)",
                                                            "implementation": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)\r\n{\r\n  return *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS));\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 23,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 26,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 23,
                                                                    "character": 23
                                                                },
                                                                {
                                                                    "line": 23,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "xUSLIndirectPciWrite32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Indirect Pci Write Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         The value to be written.\n *\n */",
                                    "definition": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)",
                                    "implementation": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  xUSLPciWrite32(PciBase + sizeof (uint32_t), Value);\r\n}",
                                    "range": [
                                        {
                                            "line": 176,
                                            "character": 0
                                        },
                                        {
                                            "line": 181,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 176,
                                            "character": 5
                                        },
                                        {
                                            "line": 176,
                                            "character": 27
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SMNx00B8",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                                "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                "definition": "#define SMNx00B8  0x00B8",
                                                "implementation": "#define SMNx00B8  0x00B8",
                                                "range": [
                                                    {
                                                        "line": 11,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 24
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 11,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 16
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "xUSLPciWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                                "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                                "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 80,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 83,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 80,
                                                        "character": 5
                                                    },
                                                    {
                                                        "line": 80,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressWrite32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                            "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 46,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 19
                                                                },
                                                                {
                                                                    "line": 43,
                                                                    "character": 40
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "memcpy",
                        "kind": 11,
                        "uri": "file:///c%3A/Program%20Files%20%28x86%29/Microsoft%20Visual%20Studio/2019/Community/VC/Tools/MSVC/14.29.30133/include/vcruntime_string.h",
                        "documentation": "",
                        "definition": "void* __cdecl memcpy(\r\n    _Out_writes_bytes_all_(_Size) void* _Dst,\r\n    _In_reads_bytes_(_Size)       void const* _Src,\r\n    _In_                          size_t      _Size\r\n    );",
                        "implementation": "void* __cdecl memcpy(\r\n    _Out_writes_bytes_all_(_Size) void* _Dst,\r\n    _In_reads_bytes_(_Size)       void const* _Src,\r\n    _In_                          size_t      _Size\r\n    );",
                        "range": [
                            {
                                "line": 42,
                                "character": 0
                            },
                            {
                                "line": 46,
                                "character": 6
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 42,
                                "character": 14
                            },
                            {
                                "line": 42,
                                "character": 20
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "_In_reads_bytes_",
                                    "kind": 13,
                                    "uri": "file:///c%3A/Program%20Files%20%28x86%29/Microsoft%20Visual%20Studio/2019/Community/VC/Tools/MSVC/14.29.30133/include/sal.h",
                                    "documentation": "// 'input' buffers with given size",
                                    "definition": "#define _In_reads_bytes_(size)         _SAL2_Source_(_In_reads_bytes_, (size), _Pre_bytecount_(size)      _Deref_pre_readonly_)",
                                    "implementation": "#define _In_reads_bytes_(size)         _SAL2_Source_(_In_reads_bytes_, (size), _Pre_bytecount_(size)      _Deref_pre_readonly_)",
                                    "range": [
                                        {
                                            "line": 317,
                                            "character": 0
                                        },
                                        {
                                            "line": 317,
                                            "character": 127
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 317,
                                            "character": 8
                                        },
                                        {
                                            "line": 317,
                                            "character": 24
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "_In_reads_bytes_",
                                    "kind": 13,
                                    "uri": "file:///c%3A/Program%20Files%20%28x86%29/Windows%20Kits/10/Include/10.0.19041.0/shared/sal.h",
                                    "documentation": "// 'input' buffers with given size",
                                    "definition": "#define _In_reads_bytes_(size)         _SAL2_Source_(_In_reads_bytes_, (size), _Pre_bytecount_(size)      _Deref_pre_readonly_)",
                                    "implementation": "#define _In_reads_bytes_(size)         _SAL2_Source_(_In_reads_bytes_, (size), _Pre_bytecount_(size)      _Deref_pre_readonly_)",
                                    "range": [
                                        {
                                            "line": 317,
                                            "character": 0
                                        },
                                        {
                                            "line": 317,
                                            "character": 127
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 317,
                                            "character": 8
                                        },
                                        {
                                            "line": 317,
                                            "character": 24
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "SmuReadCacWeightsPhx",
            "kind": 11,
            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
            "documentation": "/**\n * SmuReadCacWeightsPhx\n *\n * @brief Returns the CAC weights read from SMU\n *\n * @param   SilContext    A context structure through which host firmware defined data\n *                        can be passed to openSIL. The host firmware is responsible\n *                        for initializing the SIL_CONTEXT structure.\n * @param   MaxNumWeights The number of values to read from the SMU (defines\n *                        the maximum size of ApmWeights return data buffer)\n * @param   ApmWeights    Pointer to return data buffer\n *\n * @retval  SilPass             ApmWeights contains the CaC weights read from\n *                              SMU\n * @retval  SilInvalidParameter One of the input params was invalid or\n *                              InstanceId did not reference a valid NBIO\n *                              instance\n * @retval  SilUnsupported      This function is not supported by this version\n *                              of the driver\n *\n */",
            "definition": "SIL_STATUS\r\nSmuReadCacWeightsPhx (\r\n  SIL_CONTEXT  *SilContext,\r\n  uint32_t     MaxNumWeights,\r\n  uint64_t     *ApmWeights\r\n  )",
            "implementation": "SIL_STATUS\r\nSmuReadCacWeightsPhx (\r\n  SIL_CONTEXT  *SilContext,\r\n  uint32_t     MaxNumWeights,\r\n  uint64_t     *ApmWeights\r\n  )\r\n{\r\n  GNB_HANDLE                             *GnbHandle = NULL;\r\n  SIL_STATUS                             Status = SilPass;\r\n  uint8_t                                WeightIndex;\r\n  uint32_t                               SmuArg[6];\r\n  SMC_RESULT                             SmcStatus;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"SmuReadCacWeightsV13 Entry.\\n\");\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"MaxNumWeights %x\\n\", MaxNumWeights);\r\n\r\n  if (MaxNumWeights > MAX_CAC_WEIGHT_NUM) {\r\n    SMU_TRACEPOINT(SIL_TRACE_INFO, \"Input over Max of Weights number\\n\");\r\n    return SilUnsupported;\r\n  }\r\n\r\n  Status = SmuGetGnbHandleCommon(SilContext, 0, &GnbHandle);\r\n  if (Status == SilPass) {\r\n    SMU_TRACEPOINT(SIL_TRACE_INFO, \"GnbHandle Found.\\n\");\r\n    for (WeightIndex = 0; WeightIndex < MaxNumWeights; WeightIndex++) {\r\n      SmuServiceInitArgumentsCommon(SmuArg);\r\n      SmuArg[0] = WeightIndex;\r\n\r\n      SmcStatus = SmuServiceRequestPhx(GnbHandle->Address,\r\n        SMC_MSG_ReadCoreCacWeightRegister_PHX,\r\n        SmuArg,\r\n        0\r\n        );\r\n\r\n      if (SmcStatus == SMC_Result_OK) {\r\n        SMU_TRACEPOINT(SIL_TRACE_INFO, \"SmuArg[0] = %x\\n\", SmuArg[0]);\r\n        SMU_TRACEPOINT(SIL_TRACE_INFO, \"SmuArg[0] = %x\\n\", SmuArg[1]);\r\n        ApmWeights[WeightIndex] = ((uint64_t) SmuArg[1] << 32) | SmuArg[0];\r\n      } else {\r\n        Status = SilInvalidParameter;\r\n        SMU_TRACEPOINT(SIL_TRACE_INFO, \"SmuRequestFail!!\\n\");\r\n      }\r\n    }\r\n  }\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Exit Status: 0x%x\\n\", Status);\r\n  return Status;\r\n}",
            "range": [
                {
                    "line": 497,
                    "character": 0
                },
                {
                    "line": 544,
                    "character": 1
                }
            ],
            "selectionRange": [
                {
                    "line": 498,
                    "character": 0
                },
                {
                    "line": 498,
                    "character": 20
                }
            ],
            "dependencies": {
                "callTree": [
                    {
                        "name": "SIL_STATUS",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                        "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                        "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                        "range": [
                            {
                                "line": 49,
                                "character": 0
                            },
                            {
                                "line": 74,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 74,
                                "character": 2
                            },
                            {
                                "line": 74,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_CONTEXT",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                        "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                        "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                        "range": [
                            {
                                "line": 131,
                                "character": 0
                            },
                            {
                                "line": 135,
                                "character": 14
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 135,
                                "character": 2
                            },
                            {
                                "line": 135,
                                "character": 13
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "GNB_HANDLE",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/GnbDxio.h",
                        "documentation": "",
                        "definition": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                        "implementation": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                        "range": [
                            {
                                "line": 555,
                                "character": 0
                            },
                            {
                                "line": 555,
                                "character": 39
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 555,
                                "character": 28
                            },
                            {
                                "line": 555,
                                "character": 38
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMC_RESULT",
                        "kind": 10,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                        "documentation": "/// SMU Response Codes",
                        "definition": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                        "implementation": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                        "range": [
                            {
                                "line": 13,
                                "character": 0
                            },
                            {
                                "line": 20,
                                "character": 13
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 20,
                                "character": 2
                            },
                            {
                                "line": 20,
                                "character": 12
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMU_TRACEPOINT",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                        "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                        "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                        "range": [
                            {
                                "line": 19,
                                "character": 0
                            },
                            {
                                "line": 24,
                                "character": 19
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 19,
                                "character": 8
                            },
                            {
                                "line": 19,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SIL_TRACE_INFO",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                        "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                        "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                        "range": [
                            {
                                "line": 104,
                                "character": 0
                            },
                            {
                                "line": 104,
                                "character": 118
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 104,
                                "character": 8
                            },
                            {
                                "line": 104,
                                "character": 22
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "MAX_CAC_WEIGHT_NUM",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                        "documentation": "/**\n * @file  SmuDefs.h\n * This file contains enums for SMU response types.\n */",
                        "definition": "#define MAX_CAC_WEIGHT_NUM             23",
                        "implementation": "#define MAX_CAC_WEIGHT_NUM             23",
                        "range": [
                            {
                                "line": 10,
                                "character": 0
                            },
                            {
                                "line": 10,
                                "character": 41
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 10,
                                "character": 8
                            },
                            {
                                "line": 10,
                                "character": 26
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SMC_MSG_ReadCoreCacWeightRegister_PHX",
                        "kind": 13,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.h",
                        "documentation": "/// BIOS to SMU Message Definitions for Phoenix",
                        "definition": "#define SMC_MSG_ReadCoreCacWeightRegister_PHX           0xA  ///< Read Core CAC weights",
                        "implementation": "#define SMC_MSG_ReadCoreCacWeightRegister_PHX           0xA  ///< Read Core CAC weights",
                        "range": [
                            {
                                "line": 12,
                                "character": 0
                            },
                            {
                                "line": 12,
                                "character": 87
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 12,
                                "character": 8
                            },
                            {
                                "line": 12,
                                "character": 45
                            }
                        ],
                        "dependencies": {
                            "callTree": []
                        }
                    },
                    {
                        "name": "SmuGetGnbHandleCommon",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.c",
                        "documentation": "/**\n * SmuGetGnbHandleCommon\n *\n * @brief   Return GNB_HANDLE of Nbio InstanceId\n *\n * @param   SilContext  A context structure through which host firmware defined data\n *                      can be passed to openSIL. The host firmware is responsible\n *                      for initializing the SIL_CONTEXT structure.\n * @param   InstanceId  The unique identifier of the SMU instance associated\n *                      with this socket (for GN, the socket number)\n * @param   Handle      Pointer to GNB_HANDLE* to return GNB_HANDLE of this\n *                      InstanceId\n *\n * @retval  SilPass             GnbHandle is found associated with socket\n *                              number\n * @retval  SilInvalidParameter InstanceId did not reference a valid NBIO\n *                              instance\n **/",
                        "definition": "SIL_STATUS\r\nSmuGetGnbHandleCommon (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  GNB_HANDLE     **Handle\r\n  )",
                        "implementation": "SIL_STATUS\r\nSmuGetGnbHandleCommon (\r\n  SIL_CONTEXT    *SilContext,\r\n  uint32_t       InstanceId,\r\n  GNB_HANDLE     **Handle\r\n  )\r\n{\r\n  SIL_STATUS            Status;\r\n  bool                  InstanceFound;\r\n  GNB_HANDLE            *GnbHandle;\r\n  NBIO_IP2IP_API        *NbioIp2Ip;\r\n\r\n  Status = SilInvalidParameter;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  if (SilGetIp2IpApi(SilContext, SilId_NbioClass, (void **)(&NbioIp2Ip)) != SilPass) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \" NBIO API is not found.\\n\");\r\n    return SilNotFound;\r\n  }\r\n  GnbHandle = NbioIp2Ip->GetGnbHandle(SilContext);\r\n\r\n  InstanceFound = false;\r\n  while ((InstanceFound == false) && (GnbHandle != NULL)) {\r\n    if (GnbHandle->SocketId == InstanceId) {\r\n      InstanceFound = true;\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"Instance found.\\n\");\r\n      Status = SilPass;\r\n    } else {\r\n      SMU_TRACEPOINT(SIL_TRACE_INFO, \"Gnb next handle.\\n\");\r\n      GnbHandle = GnbGetNextHandle(GnbHandle);\r\n    }\r\n  }\r\n\r\n  *Handle = GnbHandle;\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Exit Status: 0x%x\\n\", Status);\r\n  return Status;\r\n}",
                        "range": [
                            {
                                "line": 96,
                                "character": 0
                            },
                            {
                                "line": 133,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 97,
                                "character": 0
                            },
                            {
                                "line": 97,
                                "character": 21
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SIL_STATUS",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                    "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                    "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                    "range": [
                                        {
                                            "line": 49,
                                            "character": 0
                                        },
                                        {
                                            "line": 74,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 74,
                                            "character": 2
                                        },
                                        {
                                            "line": 74,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_CONTEXT",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                    "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                    "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                    "range": [
                                        {
                                            "line": 131,
                                            "character": 0
                                        },
                                        {
                                            "line": 135,
                                            "character": 14
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 135,
                                            "character": 2
                                        },
                                        {
                                            "line": 135,
                                            "character": 13
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "GNB_HANDLE",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/GnbDxio.h",
                                    "documentation": "",
                                    "definition": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                    "implementation": "typedef PCIe_SILICON_CONFIG GNB_HANDLE;",
                                    "range": [
                                        {
                                            "line": 555,
                                            "character": 0
                                        },
                                        {
                                            "line": 555,
                                            "character": 39
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 555,
                                            "character": 28
                                        },
                                        {
                                            "line": 555,
                                            "character": 38
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "NBIO_IP2IP_API",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/NbioIp2Ip.h",
                                    "documentation": "// Define the Ip2Ip API as a struct containing pointers to the above functions",
                                    "definition": "typedef struct {\r\n  NBIO_GET_HANDLE                                  NbioGetHandle;\r\n  NBIO_GET_GNB_HANDLE                              GetGnbHandle;\r\n  NBIO_PCIE_CONFIG_DEBUG_DUMP                      PcieConfigDebugDump;\r\n  NBIO_GET_HOST_PCI_ADDRESS                        GetHostPciAddress;\r\n  NBIO_PCIE_CONFIG_GET_CHILD                       PcieConfigGetChild;\r\n  NBIO_PCIE_CONFIG_GET_PARENT                      PcieConfigGetParent;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES          PcieConfigRunProcForAllEngines;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES_WRAPPER  PcieConfigRunProcForAllEnginesInWrapper;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS         PcieConfigRunProcForAllWrappers;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS_NBIO    PcieConfigRunProcForAllWrappersInNbio;\r\n  NBIO_PCIE_CONFIG_CHECK_PORT_STATUS               PcieConfigCheckPortStatus;\r\n} NBIO_IP2IP_API;",
                                    "implementation": "typedef struct {\r\n  NBIO_GET_HANDLE                                  NbioGetHandle;\r\n  NBIO_GET_GNB_HANDLE                              GetGnbHandle;\r\n  NBIO_PCIE_CONFIG_DEBUG_DUMP                      PcieConfigDebugDump;\r\n  NBIO_GET_HOST_PCI_ADDRESS                        GetHostPciAddress;\r\n  NBIO_PCIE_CONFIG_GET_CHILD                       PcieConfigGetChild;\r\n  NBIO_PCIE_CONFIG_GET_PARENT                      PcieConfigGetParent;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES          PcieConfigRunProcForAllEngines;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_ENGINES_WRAPPER  PcieConfigRunProcForAllEnginesInWrapper;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS         PcieConfigRunProcForAllWrappers;\r\n  NBIO_PCIE_CONFIG_RUNPROC_FORALL_WRAPPERS_NBIO    PcieConfigRunProcForAllWrappersInNbio;\r\n  NBIO_PCIE_CONFIG_CHECK_PORT_STATUS               PcieConfigCheckPortStatus;\r\n} NBIO_IP2IP_API;",
                                    "range": [
                                        {
                                            "line": 83,
                                            "character": 0
                                        },
                                        {
                                            "line": 95,
                                            "character": 17
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 95,
                                            "character": 2
                                        },
                                        {
                                            "line": 95,
                                            "character": 16
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SMU_TRACEPOINT",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                                    "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                                    "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "range": [
                                        {
                                            "line": 19,
                                            "character": 0
                                        },
                                        {
                                            "line": 24,
                                            "character": 19
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 19,
                                            "character": 8
                                        },
                                        {
                                            "line": 19,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ERROR",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "range": [
                                        {
                                            "line": 100,
                                            "character": 0
                                        },
                                        {
                                            "line": 100,
                                            "character": 87
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 100,
                                            "character": 8
                                        },
                                        {
                                            "line": 100,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "GnbGetNextHandle",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Nbio/Common/NbioPcieTopologyHelper.h",
                                    "documentation": "",
                                    "definition": "#define GnbGetNextHandle(Descriptor) \\\r\n        (GNB_HANDLE *) PcieConfigGetNextTopologyDescriptor(Descriptor, DESCRIPTOR_TERMINATE_TOPOLOGY)",
                                    "implementation": "#define GnbGetNextHandle(Descriptor) \\\r\n        (GNB_HANDLE *) PcieConfigGetNextTopologyDescriptor(Descriptor, DESCRIPTOR_TERMINATE_TOPOLOGY)",
                                    "range": [
                                        {
                                            "line": 77,
                                            "character": 0
                                        },
                                        {
                                            "line": 78,
                                            "character": 101
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 77,
                                            "character": 8
                                        },
                                        {
                                            "line": 77,
                                            "character": 24
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SilGetIp2IpApi",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SilServices.c",
                                    "documentation": "/**\n * SilGetIp2IpApi\n *\n * @details This function is used by openSIL IPs to find and return a pointer to the Ip-2-Ip API installed for the\n *          specified IP ID.\n *\n * @param   SilContext   A context structure through which host firmware defined data\n *                       can be passed to openSIL. The host firmware is responsible\n *                       for initializing the SIL_CONTEXT structure.\n * @param   IpId         The ID of the IP block to request the Ip-2-Ip API for.  The list of\n *                       valid Ids is defined in xSIM-api.h.\n * @param   Api          Upon success, this output is a pointer to the Ip-2-Ip API.\n *\n * @returns SIL_STATUS\n * @retval  SilPass     The Api was found and returned in the Api pointer\n * @retval  SilNotFound No API was installed for IP\n *\n */",
                                    "definition": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )",
                                    "implementation": "SIL_STATUS\r\nSilGetIp2IpApi (\r\n  SIL_CONTEXT         *SilContext,\r\n  SIL_DATA_BLOCK_ID   IpId,\r\n  void                **Api\r\n  )\r\n{\r\n  SIL_STATUS          Status;\r\n  SIL_BLOCK_VARIABLES *SilVars;\r\n\r\n  // Comment this TRACEPOINT to reduce debug output\r\n  //XUSL_TRACEPOINT (SIL_TRACE_INFO, \"Get Ip-2-Ip API for IP ID %d\\n\", IpId);\r\n\r\n  SilVars = (SIL_BLOCK_VARIABLES *)(uintptr_t)SilContext->SilMemBaseAddress;\r\n\r\n  /*\r\n   * The API table (Ip2IpApi) is a member of the SIL_BLOCK_VARIABLES struct.\r\n   */\r\n\r\n  Status = SilPass;\r\n\r\n  *Api = (void *)((uintptr_t)SilVars->Ip2IpApi[IpId]);\r\n  if (*Api == NULL) {\r\n    Status = SilNotFound;\r\n    XUSL_TRACEPOINT(SIL_TRACE_ERROR, \"Ip-2-Ip API for IP ID %d NOT FOUND!\\n\", IpId);\r\n    assert(*Api != NULL);// Assert if the requested API is null\r\n  }\r\n\r\n  return Status;\r\n}",
                                    "range": [
                                        {
                                            "line": 190,
                                            "character": 0
                                        },
                                        {
                                            "line": 219,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 191,
                                            "character": 0
                                        },
                                        {
                                            "line": 191,
                                            "character": 14
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SIL_STATUS",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/Sil-api.h",
                                                "documentation": "/** @brief Return values\n *\n * @details The openSIL routines will never 'hang'. They will always return with a\n * code or value indicating the state of the outcome of the operation. For\n * functions returning status, these are the defined status codes for\n * all openSIL code.\n * Starting from value 0xF0, this enum defines reset request types from openSIL IPs.\n */",
                                                "definition": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                "implementation": "typedef enum {\r\n  SilPass = 0,                    ///< Success, function finished without error.\r\n  SilUnsupportedHardware,         ///< Fail, SoC does not support the function.\r\n  SilUnsupported,                 ///< Fail, the request is not supported.\r\n  SilInvalidParameter,            ///< Fail, the function was called with an\r\n                                  ///<   invalid parameter.\r\n  SilAborted,                     ///< Fail, the processing incurred an error\r\n                                  ///<   causing the processing to be aborted.\r\n                                  ///<   Host should take action.\r\n  SilOutOfResources,              ///< Fail, assignment of memory block failed,\r\n                                  ///<   due to depletion of available resources\r\n  SilNotFound,                    ///< Fail, The element was not found. Recheck\r\n                                  ///<   the ID unique identifier used.\r\n  SilOutOfBounds,                 ///< Fail, there is an out of bounds condition\r\n  SilDeviceError,                 ///< Fail, device being initialized reported\r\n                                  ///<   an error. Check if the IP output block\r\n                                  ///<   has more information.\r\n\r\n  SilResetRequestColdImm = 0xF0,  ///< The following values indicate a special\r\n                                  ///<   condition requiring the Host to perform\r\n                                  ///<   a system reset\r\n                                  ///< requesting Host do immediate cold reset\r\n  SilResetRequestColdDef,         ///< requesting Host do deferred cold reset\r\n  SilResetRequestWarmImm,         ///< requesting Host do immediate warm reset\r\n  SilResetRequestWarmDef,         ///< requesting Host do deferred warm reset\r\n} SIL_STATUS;",
                                                "range": [
                                                    {
                                                        "line": 49,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 74,
                                                        "character": 13
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 74,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 74,
                                                        "character": 12
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_CONTEXT",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                                "documentation": "/**\n * @brief   SIL_CONTEXT\n *\n * @details A context structure through which host firmware defined data\n *          can be passed to openSIL. The host firmware is responsible for\n *          initializing the SIL_CONTEXT structure and providing it to openSIL APIs\n */",
                                                "definition": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                "implementation": "typedef struct {\r\n  uint32_t ApobBaseAddress;   ///< Address of the APOB Info stored\r\n  uint64_t SilMemBaseAddress; ///< The base address of the SIL memory block\r\n                              ///< provided by host firmware\r\n} SIL_CONTEXT;",
                                                "range": [
                                                    {
                                                        "line": 131,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 135,
                                                        "character": 14
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 135,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 135,
                                                        "character": 13
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_DATA_BLOCK_ID",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/Include/xSIM-api.h",
                                                "documentation": "/** @brief Data Block Identifiers\n *\n *  @details These are unique identifiers used by the xSIM and the Host\n *  sides to locate an IPblock Input or Output data structure. See @ref SilFindStructure.\n *  Each block type must have a unique identifier, so an IP  may have several\n *  block IDs defined for the sections of memory it uses (input, output, private)\n *  and each may have multiple instances. For example, a UART port may use one\n *  ID for 'UART Port' but have several instances, one per port.\n */",
                                                "definition": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                                "implementation": "typedef enum {\r\n  SilId_SocCommon = 0,\r\n  SilId_DfClass,\r\n  SilId_CcxClass,\r\n  SilId_FchClass,\r\n  SilId_MultiFchClass,\r\n  SilId_FchHwAcpiP,\r\n  SilId_FchAb,\r\n  SilId_FchHwAcpi,\r\n  SilId_FchIsa,\r\n  SilId_FchEspi,\r\n  SilId_FchUsb,\r\n  SilId_MemClass,\r\n  SilId_MultiFch,\r\n  SilId_NbioClass,\r\n  SilId_XmpClass,\r\n  SilId_RcManager,\r\n  SilId_SmuClass,\r\n  SilId_MpioClass,\r\n  SilId_CxlClass,\r\n  SilId_RasClass,\r\n  SilId_ApobClass,\r\n  SilId_GfxClass,\r\n  // Add new elements above this line ^^^\r\n  SilId_ListEnd             ///< Value to bound the list\r\n} SIL_DATA_BLOCK_ID;",
                                                "range": [
                                                    {
                                                        "line": 48,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 73,
                                                        "character": 20
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 73,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 73,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_BLOCK_VARIABLES",
                                                "kind": 10,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                "documentation": "/** Block (private) variables for xSIM\n *\n *  These are variables held in the Host memory, dereferenced by\n *  the mSilMemoryBase global. Think of them as the input block\n *  for the SIL core.\n *\n */",
                                                "definition": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                                "implementation": "typedef struct {\r\n  uint32_t                HostBlockSize;                      ///< Size of block allocated by the Host\r\n  uint32_t                FreeSpaceOffset;                    ///< Offset to next area of free space\r\n  uint32_t                FreeSpaceLeft;                      ///< tracking remaining free space\r\n  ACTIVE_SOC_DATA         ActiveSoC;                          ///< Descriptors for SoC in the socket\r\n  PLATFORM_DESC           PlatformData;                       ///< Descriptors for the platform\r\n  uint64_t                Ip2IpApi[SilId_ListEnd];            ///< IP to IP API table.  This table provides IP\r\n                                                              ///< abstraction between IPs.\r\n  uint64_t                Common2RevXferTable[SilId_ListEnd]; ///< IP Common to Rev specific transfer (Xfer) table.\r\n                                                              ///< This table provides abstraction IP version specific\r\n                                                              ///< code from common code.\r\n} SIL_BLOCK_VARIABLES;",
                                                "range": [
                                                    {
                                                        "line": 182,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 193,
                                                        "character": 22
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 193,
                                                        "character": 2
                                                    },
                                                    {
                                                        "line": 193,
                                                        "character": 21
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "SIL_TRACE_ERROR",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                                "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                                "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                                "range": [
                                                    {
                                                        "line": 100,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 100,
                                                        "character": 87
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 100,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 100,
                                                        "character": 23
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SmuServiceInitArgumentsCommon",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.c",
                        "documentation": "/**\n * SmuServiceInitArgumentsCommon\n *\n * @brief Routine to Init argument to 0\n *\n * @param  SmuArg Input Request Argument buffer to initialize\n */",
                        "definition": "void\r\nSmuServiceInitArgumentsCommon (\r\n  uint32_t *SmuArg\r\n  )",
                        "implementation": "void\r\nSmuServiceInitArgumentsCommon (\r\n  uint32_t *SmuArg\r\n  )\r\n{\r\n  memset(SmuArg, 0x0, SMU_ARGUMENT_SIZE);\r\n}",
                        "range": [
                            {
                                "line": 23,
                                "character": 0
                            },
                            {
                                "line": 29,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 24,
                                "character": 0
                            },
                            {
                                "line": 24,
                                "character": 29
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMU_ARGUMENT_SIZE",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                                    "documentation": "/**\n * @file  SmuDefs.h\n * This file contains enums for SMU response types.\n */",
                                    "definition": "#define SMU_ARGUMENT_SIZE              24",
                                    "implementation": "#define SMU_ARGUMENT_SIZE              24",
                                    "range": [
                                        {
                                            "line": 9,
                                            "character": 0
                                        },
                                        {
                                            "line": 9,
                                            "character": 41
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 9,
                                            "character": 8
                                        },
                                        {
                                            "line": 9,
                                            "character": 25
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "memset",
                                    "kind": 11,
                                    "uri": "file:///c%3A/Program%20Files%20%28x86%29/Microsoft%20Visual%20Studio/2019/Community/VC/Tools/MSVC/14.29.30133/include/vcruntime_string.h",
                                    "documentation": "",
                                    "definition": "void* __cdecl memset(\r\n    _Out_writes_bytes_all_(_Size) void*  _Dst,\r\n    _In_                          int    _Val,\r\n    _In_                          size_t _Size\r\n    );",
                                    "implementation": "void* __cdecl memset(\r\n    _Out_writes_bytes_all_(_Size) void*  _Dst,\r\n    _In_                          int    _Val,\r\n    _In_                          size_t _Size\r\n    );",
                                    "range": [
                                        {
                                            "line": 62,
                                            "character": 0
                                        },
                                        {
                                            "line": 66,
                                            "character": 6
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 62,
                                            "character": 14
                                        },
                                        {
                                            "line": 62,
                                            "character": 20
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SmuServiceRequestPhx",
                        "kind": 11,
                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.c",
                        "documentation": "/**\n * SmuServiceRequestPhx\n *\n * @brief   SMU service request for PHX\n *\n * @param   PciAddress      PCI_ADDR of this NBIO\n * @param   RequestId       BIOS to SMU Message ID\n * @param   RequestArgument Request Argument\n * @param   AccessFlags     See GNB_ACCESS_FLAGS_* definitions\n *\n * @retval  SMC_RESULT\n */",
                        "definition": "SMC_RESULT\r\nSmuServiceRequestPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )",
                        "implementation": "SMC_RESULT\r\nSmuServiceRequestPhx (\r\n  PCI_ADDR PciAddress,\r\n  uint32_t RequestId,\r\n  uint32_t *RequestArgument,\r\n  uint32_t AccessFlags\r\n  )\r\n{\r\n  uint32_t SmuMessageResponse;\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_ENTRY, \"\\n\");\r\n\r\n  if (RequestId > SMC_Message_Count_PHX) {\r\n    SMU_TRACEPOINT(SIL_TRACE_ERROR, \"SmuServiceRequest INVALID!!.\\n\");\r\n    return SMC_Result_OK;\r\n  }\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"Service Request 0x%x\\n\", RequestId);\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n    \"Service Request Argument 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\\n\",\r\n    RequestArgument[0],\r\n    RequestArgument[1],\r\n    RequestArgument[2],\r\n    RequestArgument[3],\r\n    RequestArgument[4],\r\n    RequestArgument[5]\r\n    );\r\n\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n\r\n  // 1 Clear Response\r\n  SmuMessageResponse = 0;\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10578, SmuMessageResponse);\r\n\r\n  // 2 Write message arguments\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10998, RequestArgument[0]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B1099C, RequestArgument[1]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A0, RequestArgument[2]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A4, RequestArgument[3]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109A8, RequestArgument[4]);\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B109AC, RequestArgument[5]);\r\n\r\n  // 3 Write message ID\r\n  xUSLIndirectPciWrite32(PciAddress.AddressValue, MP1MMIOx3B10528, (uint32_t)RequestId);\r\n\r\n  // 4 Poll Response until non-zero\r\n  do {\r\n    xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10578, &SmuMessageResponse);\r\n    SMU_TRACEPOINT(SIL_TRACE_INFO,\r\n      \"Poll SMU Message Response until non-zero!! Current SMU Message Response 0x%x\\n\",\r\n      SmuMessageResponse\r\n      );\r\n  } while (SmuMessageResponse == 0x0);\r\n  SMU_TRACEPOINT(SIL_TRACE_INFO, \"After SMU Message Responded!!\\n\");\r\n\r\n  if ((SMC_RESULT)SmuMessageResponse == SMC_Result_Fatal) {\r\n    assert((SMC_RESULT)SmuMessageResponse != SMC_Result_Fatal);\r\n    return SMC_Result_Fatal;\r\n  }\r\n\r\n  // 5 Read updated SMU message arguments\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B10998, &RequestArgument[0]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B1099C, &RequestArgument[1]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A0, &RequestArgument[2]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A4, &RequestArgument[3]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109A8, &RequestArgument[4]);\r\n  xUSLIndirectPciRead32(PciAddress.AddressValue, MP1MMIOx3B109AC, &RequestArgument[5]);\r\n\r\n  SMU_TRACEPOINT(SIL_TRACE_EXIT, \"\\n\");\r\n  return (SMC_RESULT)SmuMessageResponse;\r\n}",
                        "range": [
                            {
                                "line": 133,
                                "character": 0
                            },
                            {
                                "line": 203,
                                "character": 1
                            }
                        ],
                        "selectionRange": [
                            {
                                "line": 134,
                                "character": 0
                            },
                            {
                                "line": 134,
                                "character": 20
                            }
                        ],
                        "dependencies": {
                            "callTree": [
                                {
                                    "name": "SMC_RESULT",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/SmuDefs.h",
                                    "documentation": "/// SMU Response Codes",
                                    "definition": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                                    "implementation": "typedef enum {\r\n  SMC_Result_Fatal = -4,\r\n  SMC_Result_OK = 0x1,\r\n  SMC_Result_CmdRejectedBusy = 0xFC,\r\n  SMC_Result_CmdRejectedPrereq = 0xFD,\r\n  SMC_Result_UnknownCmd = 0xFE,\r\n  SMC_Result_Failed = 0xFF,\r\n} SMC_RESULT;",
                                    "range": [
                                        {
                                            "line": 13,
                                            "character": 0
                                        },
                                        {
                                            "line": 20,
                                            "character": 13
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 20,
                                            "character": 2
                                        },
                                        {
                                            "line": 20,
                                            "character": 12
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "PCI_ADDR",
                                    "kind": 10,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/Pci.h",
                                    "documentation": "/// Union type for PCI address",
                                    "definition": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                                    "implementation": "typedef union _PCI_ADDR {\r\n  uint32_t          AddressValue;        ///< Formal address\r\n  EXT_PCI_ADDR      Address;             ///< Extended address\r\n} PCI_ADDR;",
                                    "range": [
                                        {
                                            "line": 43,
                                            "character": 0
                                        },
                                        {
                                            "line": 46,
                                            "character": 11
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 46,
                                            "character": 2
                                        },
                                        {
                                            "line": 46,
                                            "character": 10
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SMU_TRACEPOINT",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Common/SmuCommon.h",
                                    "documentation": "/**********************************************************************************************************************\n * Common Variables\n *\n */",
                                    "definition": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "implementation": "#define SMU_TRACEPOINT(MsgLevel, Message, ...)        \\\r\n        do {                \\\r\n          if (DEBUG_FILTER_SMU & SIL_DEBUG_MODULE_FILTER) {    \\\r\n            XUSL_TRACEPOINT(MsgLevel, Message, ## __VA_ARGS__); \\\r\n          } \\\r\n        } while (0)",
                                    "range": [
                                        {
                                            "line": 19,
                                            "character": 0
                                        },
                                        {
                                            "line": 24,
                                            "character": 19
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 19,
                                            "character": 8
                                        },
                                        {
                                            "line": 19,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ENTRY",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "implementation": "#define SIL_TRACE_ENTRY   BIT_32(2)   ///< Messages showing entry flow",
                                    "range": [
                                        {
                                            "line": 102,
                                            "character": 0
                                        },
                                        {
                                            "line": 102,
                                            "character": 70
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 102,
                                            "character": 8
                                        },
                                        {
                                            "line": 102,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SMC_Message_Count_PHX",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuInitPhx.h",
                                    "documentation": "/// BIOS to SMU Message Definitions for Phoenix",
                                    "definition": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                                    "implementation": "#define SMC_Message_Count_PHX                           0x69 ///< Total number of BIOS messages",
                                    "range": [
                                        {
                                            "line": 14,
                                            "character": 0
                                        },
                                        {
                                            "line": 14,
                                            "character": 95
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 14,
                                            "character": 8
                                        },
                                        {
                                            "line": 14,
                                            "character": 29
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_ERROR",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "implementation": "#define SIL_TRACE_ERROR   BIT_32(0)   ///< Unexpected/unwanted (problematic) conditions",
                                    "range": [
                                        {
                                            "line": 100,
                                            "character": 0
                                        },
                                        {
                                            "line": 100,
                                            "character": 87
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 100,
                                            "character": 8
                                        },
                                        {
                                            "line": 100,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_INFO",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "implementation": "#define SIL_TRACE_INFO    BIT_32(4)   ///< Discovery/Configuration information that is likely useful to any log reader",
                                    "range": [
                                        {
                                            "line": 104,
                                            "character": 0
                                        },
                                        {
                                            "line": 104,
                                            "character": 118
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 104,
                                            "character": 8
                                        },
                                        {
                                            "line": 104,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B10578",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B10578   0x3B10578UL",
                                    "implementation": "#define MP1MMIOx3B10578   0x3B10578UL",
                                    "range": [
                                        {
                                            "line": 22,
                                            "character": 0
                                        },
                                        {
                                            "line": 22,
                                            "character": 37
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 22,
                                            "character": 8
                                        },
                                        {
                                            "line": 22,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B10998",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B10998 0x3B10998ul",
                                    "implementation": "#define MP1MMIOx3B10998 0x3B10998ul",
                                    "range": [
                                        {
                                            "line": 15,
                                            "character": 0
                                        },
                                        {
                                            "line": 15,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 15,
                                            "character": 8
                                        },
                                        {
                                            "line": 15,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B1099C",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                                    "implementation": "#define MP1MMIOx3B1099C 0x3B1099Cul",
                                    "range": [
                                        {
                                            "line": 16,
                                            "character": 0
                                        },
                                        {
                                            "line": 16,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 16,
                                            "character": 8
                                        },
                                        {
                                            "line": 16,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109A0",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                                    "implementation": "#define MP1MMIOx3B109A0 0x3B109A0UL",
                                    "range": [
                                        {
                                            "line": 17,
                                            "character": 0
                                        },
                                        {
                                            "line": 17,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 17,
                                            "character": 8
                                        },
                                        {
                                            "line": 17,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109A4",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                                    "implementation": "#define MP1MMIOx3B109A4 0x3B109A4UL",
                                    "range": [
                                        {
                                            "line": 18,
                                            "character": 0
                                        },
                                        {
                                            "line": 18,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 18,
                                            "character": 8
                                        },
                                        {
                                            "line": 18,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109A8",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                                    "implementation": "#define MP1MMIOx3B109A8 0x3B109A8ul",
                                    "range": [
                                        {
                                            "line": 19,
                                            "character": 0
                                        },
                                        {
                                            "line": 19,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 19,
                                            "character": 8
                                        },
                                        {
                                            "line": 19,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B109AC",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B109AC 0x3B109ACul",
                                    "implementation": "#define MP1MMIOx3B109AC 0x3B109ACul",
                                    "range": [
                                        {
                                            "line": 20,
                                            "character": 0
                                        },
                                        {
                                            "line": 20,
                                            "character": 35
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 20,
                                            "character": 8
                                        },
                                        {
                                            "line": 20,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "MP1MMIOx3B10528",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/SMU/Phx/SmuPhxReg.h",
                                    "documentation": "/**********************************************************************************************************************\n * Macros\n *\n */",
                                    "definition": "#define MP1MMIOx3B10528    0x3B10528ul",
                                    "implementation": "#define MP1MMIOx3B10528    0x3B10528ul",
                                    "range": [
                                        {
                                            "line": 21,
                                            "character": 0
                                        },
                                        {
                                            "line": 21,
                                            "character": 38
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 21,
                                            "character": 8
                                        },
                                        {
                                            "line": 21,
                                            "character": 23
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "SIL_TRACE_EXIT",
                                    "kind": 13,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/SilCommon.h",
                                    "documentation": "/** Message type enables\n * @name Group: Trace Enables\n * @anchor Trace_Enables\n * These values set the level or importance of then information being passed\n * in the message. The most critical/important are lower in value.\n * @{\n */",
                                    "definition": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "implementation": "#define SIL_TRACE_EXIT    BIT_32(3)   ///< Messages showing exit flow",
                                    "range": [
                                        {
                                            "line": 103,
                                            "character": 0
                                        },
                                        {
                                            "line": 103,
                                            "character": 69
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 103,
                                            "character": 8
                                        },
                                        {
                                            "line": 103,
                                            "character": 22
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": []
                                    }
                                },
                                {
                                    "name": "xUSLIndirectPciRead32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Indirect Pci Read Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         pointer to hold read value.\n *\n */",
                                    "definition": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)",
                                    "implementation": "void xUSLIndirectPciRead32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t *Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  *Value = xUSLPciRead32(PciBase + sizeof (uint32_t));\r\n}",
                                    "range": [
                                        {
                                            "line": 162,
                                            "character": 0
                                        },
                                        {
                                            "line": 167,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 162,
                                            "character": 5
                                        },
                                        {
                                            "line": 162,
                                            "character": 26
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SMNx00B8",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                                "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                "definition": "#define SMNx00B8  0x00B8",
                                                "implementation": "#define SMNx00B8  0x00B8",
                                                "range": [
                                                    {
                                                        "line": 11,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 24
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 11,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 16
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "xUSLPciWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                                "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                                "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 80,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 83,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 80,
                                                        "character": 5
                                                    },
                                                    {
                                                        "line": 80,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressWrite32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                            "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 46,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 19
                                                                },
                                                                {
                                                                    "line": 43,
                                                                    "character": 40
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "xUSLPciRead32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Read 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n *\n */",
                                                "definition": "uint32_t xUSLPciRead32 (uint32_t Address)",
                                                "implementation": "uint32_t xUSLPciRead32 (uint32_t Address)\r\n{\r\n  return xUSLPciExpressRead32((void *)(size_t)Address);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 68,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 71,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 68,
                                                        "character": 9
                                                    },
                                                    {
                                                        "line": 68,
                                                        "character": 22
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressRead32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)",
                                                            "implementation": "static inline uint32_t xUSLPciExpressRead32 (void *Addr)\r\n{\r\n  return *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS));\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 23,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 26,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 23,
                                                                    "character": 23
                                                                },
                                                                {
                                                                    "line": 23,
                                                                    "character": 43
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "xUSLIndirectPciWrite32",
                                    "kind": 11,
                                    "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                    "documentation": "/**\n * @brief Indirect Pci Write Access\n * @param PciBase       32-bit PCI base address of indirect register\n * @param IndexAddress  Offset of indirect register\n * @param Value         The value to be written.\n *\n */",
                                    "definition": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)",
                                    "implementation": "void xUSLIndirectPciWrite32 (volatile uint32_t PciBase, uint32_t IndexAddress, uint32_t Value)\r\n{\r\n  PciBase |= SMNx00B8;\r\n  xUSLPciWrite32(PciBase, IndexAddress);\r\n  xUSLPciWrite32(PciBase + sizeof (uint32_t), Value);\r\n}",
                                    "range": [
                                        {
                                            "line": 176,
                                            "character": 0
                                        },
                                        {
                                            "line": 181,
                                            "character": 1
                                        }
                                    ],
                                    "selectionRange": [
                                        {
                                            "line": 176,
                                            "character": 5
                                        },
                                        {
                                            "line": 176,
                                            "character": 27
                                        }
                                    ],
                                    "dependencies": {
                                        "callTree": [
                                            {
                                                "name": "SMNx00B8",
                                                "kind": 13,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/SmnAccess.h",
                                                "documentation": "/**\n * @file  SmnAccess.h\n * @brief OpenSIL SMN access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                "definition": "#define SMNx00B8  0x00B8",
                                                "implementation": "#define SMNx00B8  0x00B8",
                                                "range": [
                                                    {
                                                        "line": 11,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 24
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 11,
                                                        "character": 8
                                                    },
                                                    {
                                                        "line": 11,
                                                        "character": 16
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": []
                                                }
                                            },
                                            {
                                                "name": "xUSLPciWrite32",
                                                "kind": 11,
                                                "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/CommonLib/PciOps.c",
                                                "documentation": "/**\n * @brief Write 32-bit PCI register\n * @param Address 32-bit PCI address that encodes the PCI Bus, Device, Function and Register\n * @param Value   The value to be written in Address.\n *\n */",
                                                "definition": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)",
                                                "implementation": "void xUSLPciWrite32 (uint32_t Address, uint32_t Value)\r\n{\r\n  xUSLPciExpressWrite32((void *)(size_t)Address, Value);\r\n}",
                                                "range": [
                                                    {
                                                        "line": 80,
                                                        "character": 0
                                                    },
                                                    {
                                                        "line": 83,
                                                        "character": 1
                                                    }
                                                ],
                                                "selectionRange": [
                                                    {
                                                        "line": 80,
                                                        "character": 5
                                                    },
                                                    {
                                                        "line": 80,
                                                        "character": 19
                                                    }
                                                ],
                                                "dependencies": {
                                                    "callTree": [
                                                        {
                                                            "name": "xUSLPciExpressWrite32",
                                                            "kind": 11,
                                                            "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                            "documentation": "",
                                                            "definition": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)",
                                                            "implementation": "static inline void xUSLPciExpressWrite32 (void *Addr, uint32_t Value)\r\n{\r\n  *((volatile uint32_t *)((uint8_t *)Addr + PCI_EXPRESS_BASE_ADDRESS)) = Value;\r\n}",
                                                            "range": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 0
                                                                },
                                                                {
                                                                    "line": 46,
                                                                    "character": 1
                                                                }
                                                            ],
                                                            "selectionRange": [
                                                                {
                                                                    "line": 43,
                                                                    "character": 19
                                                                },
                                                                {
                                                                    "line": 43,
                                                                    "character": 40
                                                                }
                                                            ],
                                                            "dependencies": {
                                                                "callTree": [
                                                                    {
                                                                        "name": "PCI_EXPRESS_BASE_ADDRESS",
                                                                        "kind": 13,
                                                                        "uri": "file:///c%3A/OpenSIL/Seneca/AGESA/AmdOuiPkg/openSIL/xUSL/Include/PciExpress.h",
                                                                        "documentation": "/**\n * @file  PciExpress.h\n * @brief OpenSIL PCIe access functions prototype\n *\n * Copyright (C) 2021 - 2025 Advanced Micro Devices, Inc. All rights reserved.\n *\n */",
                                                                        "definition": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "implementation": "#define PCI_EXPRESS_BASE_ADDRESS 0xE0000000",
                                                                        "range": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 0
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 43
                                                                            }
                                                                        ],
                                                                        "selectionRange": [
                                                                            {
                                                                                "line": 11,
                                                                                "character": 8
                                                                            },
                                                                            {
                                                                                "line": 11,
                                                                                "character": 32
                                                                            }
                                                                        ],
                                                                        "dependencies": {
                                                                            "callTree": []
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
}